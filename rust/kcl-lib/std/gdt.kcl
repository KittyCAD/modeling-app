/// GD&T annotation specifying how flat faces should be.
///
/// ```kcl
/// @settings(experimentalFeatures = allow)
///
/// startSketchOn(XY)
///   |> startProfile(at = [0, 0])
///   |> line(end = [10, 0])
///   |> line(end = [0, 10])
///   |> line(end = [-10, 0])
///   |> line(end = [0, -10])
///   |> close()
///   |> extrude(length = 5, tagStart = $face1)
/// gdt::flatness(faces = [face1], tolerance = 0.1mm)
/// ```
///
/// ```kcl
/// @settings(experimentalFeatures = allow)
///
/// startSketchOn(XY)
///   |> startProfile(at = [0, 0])
///   |> line(end = [10, 0])
///   |> line(end = [0, 10])
///   |> line(end = [-10, 0])
///   |> line(end = [0, -10])
///   |> close()
///   |> extrude(length = 5, tagEnd = $face1)
/// gdt::flatness(faces = [face1], tolerance = 0.02mm, offset = [10mm, 20mm], inPlane = XZ)
/// ```
///
/// ```kcl
/// @settings(experimentalFeatures = allow)
///
/// startSketchOn(XY)
///   |> startProfile(at = [0, 0])
///   |> line(end = [10, 0])
///   |> line(end = [0, 10])
///   |> line(end = [-10, 0], tag = $face1)
///   |> line(end = [0, -10])
///   |> close()
///   |> extrude(length = 5)
/// gdt::flatness(faces = [face1], tolerance = 0.02mm, offset = [10mm, 20mm], inPlane = XZ)
/// ```
@(impl = std_rust, experimental = true)
export fn flatness(
  /// The faces to be annotated.
  @(includeInSnippet = true)
  faces: [TaggedFace; 1+],
  /// The amount of deviation from a perfect plane that is acceptable.
  @(includeInSnippet = true)
  tolerance: number(Length),
  /// The number of decimal places to display. The default is `3`. Must be greater than or equal to `0`.
  @(includeInSnippet = true)
  precision?: number(Count),
  /// The offset of the annotation from the centroid of the faces being annotated. The default is `[100mm, 100mm]`.
  @(includeInSnippet = true)
  offset?: Point2d,
  /// The plane in which to display the annotation. The default is `XY`. Other standard planes like `XZ` and `YZ` can also be used. The annotation may be displayed in a plane parallel to the given plane.
  @(includeInSnippet = true)
  inPlane?: Plane,
  /// How to display the annotation.
  style?: AnnotationStyle,
) {}
