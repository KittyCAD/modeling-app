---
source: kcl-lib/src/simulation_tests.rs
description: Result of parsing comparisons.kcl
---
{
  "Ok": {
    "body": [
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "==",
              "right": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"equality\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "equality"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "==",
              "right": {
                "end": 0,
                "raw": "3.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"equality of floats\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "equality of floats"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "!=",
              "right": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"non-equality\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "non-equality"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "!=",
              "right": {
                "end": 0,
                "raw": "4.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"non-equality of floats\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "non-equality of floats"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "<",
              "right": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"lt\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "lt"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": "<=",
              "right": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"lte but actually lt\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "lte but actually lt"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "operator": "<=",
              "right": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"lte but actually eq\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "lte but actually eq"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "operator": ">",
              "right": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"gt\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "gt"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "4",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 4.0,
                  "suffix": "None"
                }
              },
              "operator": ">=",
              "right": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"gte but actually gt\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "gte but actually gt"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "operator": ">=",
              "right": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"gte but actually eq\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "gte but actually eq"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "0.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 0.0,
                  "suffix": "None"
                }
              },
              "operator": "==",
              "right": {
                "end": 0,
                "raw": "0.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 0.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"equality of zero\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "equality of zero"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      },
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "raw": "0.0",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 0.0,
                  "suffix": "None"
                }
              },
              "operator": "==",
              "right": {
                "argument": {
                  "end": 0,
                  "raw": "0.0",
                  "start": 0,
                  "type": "Literal",
                  "type": "Literal",
                  "value": {
                    "value": 0.0,
                    "suffix": "None"
                  }
                },
                "end": 0,
                "operator": "-",
                "start": 0,
                "type": "UnaryExpression",
                "type": "UnaryExpression"
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"equality of zero and neg zero\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "equality of zero and neg zero"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      }
    ],
    "end": 0,
    "nonCodeMeta": {
      "nonCodeNodes": {
        "9": [
          {
            "end": 0,
            "start": 0,
            "type": "NonCodeNode",
            "value": {
              "type": "newLine"
            }
          }
        ]
      },
      "startNodes": []
    },
    "start": 0
  }
}
