---
source: kcl-lib/src/simulation_tests.rs
description: Result of parsing comparisons_multiple.kcl
---
{
  "Ok": {
    "body": [
      {
        "end": 0,
        "expression": {
          "arguments": [
            {
              "end": 0,
              "left": {
                "end": 0,
                "left": {
                  "end": 0,
                  "raw": "3",
                  "start": 0,
                  "type": "Literal",
                  "type": "Literal",
                  "value": {
                    "value": 3.0,
                    "suffix": "None"
                  }
                },
                "operator": "==",
                "right": {
                  "end": 0,
                  "raw": "3",
                  "start": 0,
                  "type": "Literal",
                  "type": "Literal",
                  "value": {
                    "value": 3.0,
                    "suffix": "None"
                  }
                },
                "start": 0,
                "type": "BinaryExpression",
                "type": "BinaryExpression"
              },
              "operator": "==",
              "right": {
                "end": 0,
                "raw": "3",
                "start": 0,
                "type": "Literal",
                "type": "Literal",
                "value": {
                  "value": 3.0,
                  "suffix": "None"
                }
              },
              "start": 0,
              "type": "BinaryExpression",
              "type": "BinaryExpression"
            },
            {
              "end": 0,
              "raw": "\"this should not compile\"",
              "start": 0,
              "type": "Literal",
              "type": "Literal",
              "value": "this should not compile"
            }
          ],
          "callee": {
            "end": 0,
            "name": "assert",
            "start": 0,
            "type": "Identifier"
          },
          "end": 0,
          "start": 0,
          "type": "CallExpression",
          "type": "CallExpression"
        },
        "start": 0,
        "type": "ExpressionStatement",
        "type": "ExpressionStatement"
      }
    ],
    "end": 0,
    "start": 0
  }
}
