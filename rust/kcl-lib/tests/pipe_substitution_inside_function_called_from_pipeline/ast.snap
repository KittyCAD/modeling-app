---
source: kcl-lib/src/simulation_tests.rs
description: Result of parsing pipe_substitution_inside_function_called_from_pipeline.kcl
---
{
  "Ok": {
    "body": [
      {
        "commentStart": 0,
        "declaration": {
          "commentStart": 64,
          "end": 0,
          "id": {
            "commentStart": 64,
            "end": 0,
            "name": "f",
            "start": 0,
            "type": "Identifier"
          },
          "init": {
            "body": {
              "body": [
                {
                  "argument": {
                    "commentStart": 86,
                    "end": 0,
                    "start": 0,
                    "type": "PipeSubstitution",
                    "type": "PipeSubstitution"
                  },
                  "commentStart": 79,
                  "end": 0,
                  "start": 0,
                  "type": "ReturnStatement",
                  "type": "ReturnStatement"
                }
              ],
              "commentStart": 75,
              "end": 0,
              "start": 0
            },
            "commentStart": 65,
            "end": 0,
            "params": [
              {
                "type": "Parameter",
                "identifier": {
                  "commentStart": 66,
                  "end": 0,
                  "name": "ignored",
                  "start": 0,
                  "type": "Identifier"
                }
              }
            ],
            "start": 0,
            "type": "FunctionExpression",
            "type": "FunctionExpression"
          },
          "start": 0,
          "type": "VariableDeclarator"
        },
        "end": 0,
        "kind": "fn",
        "preComments": [
          "// Make sure pipe value doesn't leak into the function call."
        ],
        "start": 0,
        "type": "VariableDeclaration",
        "type": "VariableDeclaration"
      },
      {
        "commentStart": 89,
        "declaration": {
          "commentStart": 91,
          "end": 0,
          "id": {
            "commentStart": 91,
            "end": 0,
            "name": "answer",
            "start": 0,
            "type": "Identifier"
          },
          "init": {
            "body": [
              {
                "commentStart": 100,
                "end": 0,
                "start": 0,
                "type": "PipeSubstitution",
                "type": "PipeSubstitution"
              },
              {
                "arguments": [
                  {
                    "commentStart": 109,
                    "end": 0,
                    "start": 0,
                    "type": "PipeSubstitution",
                    "type": "PipeSubstitution"
                  }
                ],
                "callee": {
                  "abs_path": false,
                  "commentStart": 107,
                  "end": 0,
                  "name": {
                    "commentStart": 107,
                    "end": 0,
                    "name": "f",
                    "start": 0,
                    "type": "Identifier"
                  },
                  "path": [],
                  "start": 0,
                  "type": "Name"
                },
                "commentStart": 107,
                "end": 0,
                "start": 0,
                "type": "CallExpression",
                "type": "CallExpression"
              }
            ],
            "commentStart": 100,
            "end": 0,
            "start": 0,
            "type": "PipeExpression",
            "type": "PipeExpression"
          },
          "start": 0,
          "type": "VariableDeclarator"
        },
        "end": 0,
        "kind": "const",
        "start": 0,
        "type": "VariableDeclaration",
        "type": "VariableDeclaration"
      }
    ],
    "commentStart": 0,
    "end": 0,
    "nonCodeMeta": {
      "nonCodeNodes": {
        "0": [
          {
            "commentStart": 89,
            "end": 0,
            "start": 0,
            "type": "NonCodeNode",
            "value": {
              "type": "newLine"
            }
          }
        ]
      },
      "startNodes": []
    },
    "start": 0
  }
}
