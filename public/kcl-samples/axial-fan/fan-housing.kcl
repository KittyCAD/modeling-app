// Set Units
@settings(defaultLengthUnit = mm)

// Import Parameters
import * from "globals.kcl"

export fn fanHousing() {
  // Model the housing which holds the motor, the fan, and the mounting provisions
  // Bottom mounting face
  bottomFaceSketch = startSketchOn(XY)
    |> startProfileAt([-fanSize / 2, -fanSize / 2], %)
    |> angledLine([0, fanSize], %, $rectangleSegmentA001)
    |> angledLine([
         segAng(rectangleSegmentA001) + 90,
         fanSize
       ], %, $rectangleSegmentB001)
    |> angledLine([
         segAng(rectangleSegmentA001),
         -segLen(rectangleSegmentA001)
       ], %, $rectangleSegmentC001)
    |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD001)
    |> close()
    |> hole(circle(center = [0, 0], radius = 4), %)
    |> hole(circle(
         center = [
           mountingHoleSpacing / 2,
           mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           -mountingHoleSpacing / 2,
           mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           mountingHoleSpacing / 2,
           -mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           -mountingHoleSpacing / 2,
           -mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> extrude(length = 4)

  // Add large openings to the bottom face to allow airflow through the fan
  airflowPattern = startSketchOn(bottomFaceSketch, 'END')
    |> startProfileAt([fanSize * 7 / 25, -fanSize * 9 / 25], %)
    |> angledLine([140, fanSize * 12 / 25], %, $seg01)
    |> tangentialArc({
         radius = fanSize * 1 / 50,
         offset = 90
       }, %)
    |> angledLine([-130, fanSize * 8 / 25], %)
    |> tangentialArc({
         radius = fanSize * 1 / 50,
         offset = 90
       }, %)
    |> angledLine([segAng(seg01) + 180, fanSize * 2 / 25], %)
    |> tangentialArc({
         radius = fanSize * 8 / 25,
         offset = 40
       }, %)
    |> xLine(length = fanSize * 3 / 25)
    |> tangentialArcTo([profileStartX(%), profileStartY(%)], %)
    |> close()
    |> patternCircular2d(
         instances = 4,
         center = [0, 0],
         arcDegrees = 360,
         rotateDuplicates = true,
       )
    |> extrude(length = -4)

  // Scribe an octogon with 4 equal sides and 4 equal diagonals that scales with fan size. Calculate the start point to center it about the fan location. This will be the middle of the fan housing body
  octLen = fanSize * 13 / 25
  octDiag = fanSize * 8 / 25
  bodyCenter = startSketchOn(bottomFaceSketch, 'END')
    |> startProfileAt([
         -octLen / 2,
         -octLen / 2 - (octDiag * cos(toRadians(45)))
       ], %)
    |> xLine(length = octLen, tag = $seg02)
    |> angledLine([45, octDiag], %, $seg03)
    |> yLine(length = segLen(seg02), tag = $seg05)
    |> angledLine([135, segLen(seg03)], %, $seg06)
    |> xLine(length = -segLen(seg02), tag = $seg07)
    |> angledLine([-135, segLen(seg03)], %, $seg08)
    |> yLine(length = -segLen(seg02), tag = $seg09)
    |> angledLine([-45, segLen(seg03)], %, $seg10)
    |> close()
    |> extrude(length = fanHeight - 4 - 4)

  // Cut a hole in the body to accomidate the fan
  bodyFanHole = startSketchOn(bodyCenter, 'END')
    |> circle(center = [0, 0], radius = fanSize * 23 / 50)
    |> extrude(length = -(fanHeight - 4 - 4))

  // Top mounting face. Cut a hole in the face to accomidate the fan
  topFaceSketch = startSketchOn(bodyCenter, 'END')
  topHoles = startProfileAt([-fanSize / 2, -fanSize / 2], topFaceSketch)
    |> angledLine([0, fanSize], %, $rectangleSegmentA002)
    |> angledLine([
         segAng(rectangleSegmentA002) + 90,
         fanSize
       ], %, $rectangleSegmentB002)
    |> angledLine([
         segAng(rectangleSegmentA002),
         -segLen(rectangleSegmentA002)
       ], %, $rectangleSegmentC002)
    |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD002)
    |> close()
    |> hole(circle(center = [0, 0], radius = fanSize * 23 / 50), %)
    |> hole(circle(
         center = [
           mountingHoleSpacing / 2,
           mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           -mountingHoleSpacing / 2,
           mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           mountingHoleSpacing / 2,
           -mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> hole(circle(
         center = [
           -mountingHoleSpacing / 2,
           -mountingHoleSpacing / 2
         ],
         radius = mountingHoleSize / 2,
       ), %)
    |> extrude(length = 4)

  // Create a housing for the electric motor to sit
  motorHousing = startSketchOn(bottomFaceSketch, 'END')
    |> circle(center = [0, 0], radius = 11.2)
    |> extrude(length = 16)
  fanHousing = startSketchOn(motorHousing, 'END')
    |> circle(center = [0, 0], radius = 10)
    |> extrude(length = -16)
    |> appearance(color = "#854f29")
    |> fillet(
         radius = abs(fanSize - mountingHoleSpacing) / 2,
         tags = [
           getNextAdjacentEdge(rectangleSegmentA001),
           getNextAdjacentEdge(rectangleSegmentB001),
           getNextAdjacentEdge(rectangleSegmentC001),
           getNextAdjacentEdge(rectangleSegmentD001),
           getNextAdjacentEdge(rectangleSegmentA002),
           getNextAdjacentEdge(rectangleSegmentB002),
           getNextAdjacentEdge(rectangleSegmentC002),
           getNextAdjacentEdge(rectangleSegmentD002)
         ],
       )

  return fanHousing
}
fanHousing()
