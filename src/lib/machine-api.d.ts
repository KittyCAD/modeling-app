/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Return the OpenAPI schema in JSON format. */
    get: operations['api_get_schema']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/machines': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List available machines and their statuses */
    get: operations['get_machines']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/ping': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Return pong. */
    get: operations['ping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/print': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Print a given file. File must be a sliceable 3D model. */
    post: operations['print_file']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Error information from a response. */
    Error: {
      error_code?: string
      message: string
      request_id: string
    }
    /** @description Details for a 3d printer connected over USB. */
    Machine:
      | {
          id: string
          manufacturer: string
          model: string
          port: string
          /** @enum {string} */
          type: 'UsbPrinter'
        }
      | {
          /** @description The hostname of the printer. */
          hostname?: string | null
          /**
           * Format: ip
           * @description The IP address of the printer.
           */
          ip: string
          /** @description The manufacturer of the printer. */
          manufacturer: components['schemas']['NetworkPrinterManufacturer']
          /** @description The model of the printer. */
          model?: string | null
          /**
           * Format: uint16
           * @description The port of the printer.
           */
          port?: number | null
          /** @description The serial number of the printer. */
          serial?: string | null
          /** @enum {string} */
          type: 'NetworkPrinter'
        }
    /** @description Network printer manufacturer. */
    NetworkPrinterManufacturer: 'Bambu' | 'Formlabs'
    /** @description The response from the `/ping` endpoint. */
    Pong: {
      /** @description The pong response. */
      message: string
    }
    /** @description The response from the `/print` endpoint. */
    PrintJobResponse: {
      /** @description The job id used for this print. */
      job_id: string
      /** @description The parameters used for this print. */
      parameters: components['schemas']['PrintParameters']
    }
    /** @description Parameters for printing. */
    PrintParameters: {
      machine_id: string
    }
  }
  responses: {
    /** @description Error */
    Error: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  api_get_schema: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      '4XX': components['responses']['Error']
      '5XX': components['responses']['Error']
    }
  }
  get_machines: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Machine'] | undefined
          }
        }
      }
      '4XX': components['responses']['Error']
      '5XX': components['responses']['Error']
    }
  }
  ping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Pong']
        }
      }
      '4XX': components['responses']['Error']
      '5XX': components['responses']['Error']
    }
  }
  print_file: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrintJobResponse']
        }
      }
      '4XX': components['responses']['Error']
      '5XX': components['responses']['Error']
    }
  }
}
