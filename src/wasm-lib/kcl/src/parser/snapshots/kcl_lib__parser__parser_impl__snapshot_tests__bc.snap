---
source: kcl/src/parser/parser_impl.rs
assertion_line: 3771
expression: actual
---
{
  "type": "UnboxedNode",
  "kind": {
    "body": [
      {
        "type": "VariableDeclaration",
        "type": "UnboxedNode",
        "kind": {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "UnboxedNode",
              "kind": {
                "type": "VariableDeclarator",
                "id": {
                  "type": "UnboxedNode",
                  "kind": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "start": 6,
                  "end": 7
                },
                "init": {
                  "type": "IfExpression",
                  "type": "UnboxedNode",
                  "kind": {
                    "type": "IfExpression",
                    "cond": {
                      "type": "Literal",
                      "type": "UnboxedNode",
                      "kind": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      },
                      "start": 13,
                      "end": 17
                    },
                    "then_val": {
                      "type": "UnboxedNode",
                      "kind": {
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "type": "UnboxedNode",
                            "kind": {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "Literal",
                                "type": "UnboxedNode",
                                "kind": {
                                  "type": "Literal",
                                  "value": 3,
                                  "raw": "3"
                                },
                                "start": 32,
                                "end": 33
                              }
                            },
                            "start": 32,
                            "end": 33
                          }
                        ]
                      },
                      "start": 32,
                      "end": 42
                    },
                    "else_ifs": [],
                    "final_else": {
                      "type": "UnboxedNode",
                      "kind": {
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "type": "UnboxedNode",
                            "kind": {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "Literal",
                                "type": "UnboxedNode",
                                "kind": {
                                  "type": "Literal",
                                  "value": 4,
                                  "raw": "4"
                                },
                                "start": 63,
                                "end": 64
                              }
                            },
                            "start": 63,
                            "end": 64
                          }
                        ]
                      },
                      "start": 63,
                      "end": 73
                    },
                    "digest": null
                  },
                  "start": 10,
                  "end": 74
                }
              },
              "start": 6,
              "end": 74
            }
          ],
          "kind": "const"
        },
        "start": 0,
        "end": 74
      }
    ]
  },
  "start": 0,
  "end": 74
}
