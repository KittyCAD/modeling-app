#[allow(non_camel_case_types, missing_docs)]
#[doc = "Std lib function: import"]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, schemars :: JsonSchema, ts_rs :: TS)]
#[ts(export)]
pub(crate) struct Import {}

#[allow(non_upper_case_globals, missing_docs)]
#[doc = "Std lib function: import"]
pub(crate) const Import: Import = Import {};
fn boxed_import(
    args: crate::std::Args,
) -> std::pin::Pin<
    Box<
        dyn std::future::Future<
            Output = anyhow::Result<crate::executor::MemoryItem, crate::errors::KclError>,
        >,
    >,
> {
    Box::pin(import(args))
}

impl crate::docs::StdLibFn for Import {
    fn name(&self) -> String {
        "import".to_string()
    }

    fn summary(&self) -> String {
        "".to_string()
    }

    fn description(&self) -> String {
        "".to_string()
    }

    fn tags(&self) -> Vec<String> {
        vec![]
    }

    fn args(&self) -> Vec<crate::docs::StdLibFnArg> {
        let mut settings = schemars::gen::SchemaSettings::openapi3();
        settings.inline_subschemas = true;
        let mut generator = schemars::gen::SchemaGenerator::new(settings);
        vec![crate::docs::StdLibFnArg {
            name: "args".to_string(),
            type_: "kittycad::types::InputFormat".to_string(),
            schema: <Option<kittycad::types::InputFormat>>::json_schema(&mut generator),
            required: false,
        }]
    }

    fn return_value(&self) -> Option<crate::docs::StdLibFnArg> {
        let mut settings = schemars::gen::SchemaSettings::openapi3();
        settings.inline_subschemas = true;
        let mut generator = schemars::gen::SchemaGenerator::new(settings);
        Some(crate::docs::StdLibFnArg {
            name: "".to_string(),
            type_: "[SketchGroup]".to_string(),
            schema: <Vec<SketchGroup>>::json_schema(&mut generator),
            required: true,
        })
    }

    fn unpublished(&self) -> bool {
        false
    }

    fn deprecated(&self) -> bool {
        false
    }

    fn std_lib_fn(&self) -> crate::std::StdFn {
        boxed_import
    }

    fn clone_box(&self) -> Box<dyn crate::docs::StdLibFn> {
        Box::new(self.clone())
    }
}

fn inner_import(
    #[doc = r" The args to do shit to."] args: Option<kittycad::types::InputFormat>,
) -> Result<Vec<Box<SketchGroup>>> {
    args
}
