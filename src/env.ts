type EnvironmentVariables = {
  readonly NODE_ENV: string | undefined
  readonly VITE_KITTYCAD_API_BASE_URL: string | undefined
  readonly VITE_KITTYCAD_API_WEBSOCKET_URL: string | undefined
  readonly VITE_KITTYCAD_API_TOKEN: string | undefined
  readonly VITE_KITTYCAD_SITE_BASE_URL: string | undefined
  readonly VITE_KITTYCAD_SITE_APP_URL: string | undefined
  readonly TEST: string | undefined
  readonly DEV: string | undefined
  readonly CI: string | undefined
}

export const viteEnv = () => {
  // It turns out import.meta.env is a really fucky env var passing method.
  // It's purely generated by Vite and nothing else.
  // For Jest tests, we use babel to deal with it (it's a Syntax error otherwise)
  // @ts-ignore: TS1343
  return import.meta.env
}

export const windowElectronProcessEnv = () => {
  return typeof window !== 'undefined' && typeof window.electron !== 'undefined'
    ? window?.electron?.process?.env
    : undefined
}

export const processEnv = () => {
  if (typeof process === 'undefined') {
    // Web, no window.process or process
    return undefined
  } else if (
    typeof process !== 'undefined' &&
    typeof window !== 'undefined' &&
    process.env.TEST !== 'true'
  ) {
    // Web, you made window.process, why :(, need process.env.TEST to make sure the frontend gets evaluated.
    // The frontend can spoof this too :(
    return undefined
  }

  return process.env
}

/**
 * This function will work in any runtime. Note that we shouldn't be using this for any values outside of the
 * EnvironmentVariables type. This is not going to replace process.env.
 *
 * Vite -> node.js -> bridge -> javascript
 * We want to have the node.js and javascript runtime share the same code for getting these important configurations.
 */
export default (): EnvironmentVariables => {
  // Compute the possible environment variables, order operation is important
  // runtime (TODO) > process.env > window.electron.process.env > import.meta.env

  const viteOnly = viteEnv()
  const windowElectronProcessEnvOnly = windowElectronProcessEnv()
  const processEnvOnly = processEnv()
  const env = processEnvOnly || windowElectronProcessEnvOnly || viteOnly
  // Vite uses Booleans and process.env uses strings
  let DEV = env.DEV
  if (typeof DEV === 'boolean') {
    DEV = Number(DEV).toString()
  }
  const environmentVariables: EnvironmentVariables = {
    NODE_ENV: (env.NODE_ENV as string) || undefined,
    VITE_KITTYCAD_API_BASE_URL:
      (env.VITE_KITTYCAD_API_BASE_URL as string) || undefined,
    VITE_KITTYCAD_API_WEBSOCKET_URL:
      (env.VITE_KITTYCAD_API_WEBSOCKET_URL as string) || undefined,
    VITE_KITTYCAD_API_TOKEN:
      (env.VITE_KITTYCAD_API_TOKEN as string) || undefined,
    VITE_KITTYCAD_SITE_BASE_URL:
      (env.VITE_KITTYCAD_SITE_BASE_URL as string) || undefined,
    VITE_KITTYCAD_SITE_APP_URL:
      (env.VITE_KITTYCAD_SITE_APP_URL as string) || undefined,
    TEST: (env.TEST as string) || undefined,
    DEV: DEV || undefined,
    CI: (env.CI as string) || undefined,
  }
  return environmentVariables
}
