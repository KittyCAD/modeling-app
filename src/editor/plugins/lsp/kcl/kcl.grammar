@precedence {
  member
  call
  exp @left
  mult @left
  add @left
  comp @left
  pipe @left
  range
}

@top Program {
  Shebang?
  statement*
}

statement[@isGroup=Statement] {
  FunctionDeclaration { kw<"fn"> VariableDefinition Equals ParamList Arrow Body } |
  VariableDeclaration { (kw<"var"> | kw<"let"> | kw<"const">) VariableDefinition Equals expression } |
  ReturnStatement { kw<"return"> expression } |
  ExpressionStatement { expression }
}

ParamList { "(" commaSep<Parameter { VariableDefinition "?"? (":" type)? }> ")" }

Body { "{" statement* "}" }

expression[@isGroup=Expression] {
  String |
  Number |
  VariableName |
  TagDeclarator |
  kw<"true"> | kw<"false"> | kw<"nil"> |
  PipeSubstitution |
  BinaryExpression {
    expression !add AddOp expression |
    expression !mult MultOp expression |
    expression !exp ExpOp expression |
    expression !comp CompOp expression
  } |
  UnaryExpression { AddOp expression } |
  ParenthesizedExpression { "(" expression ")" } |
  CallExpression { expression !call ArgumentList } |
  ArrayExpression { "[" commaSep<expression | IntegerRange { expression !range ".." expression }> "]" } |
  ObjectExpression { "{" commaSep<ObjectProperty> "}" } |
  MemberExpression { expression !member "." PropertyName } |
  SubscriptExpression { expression !member "[" expression "]" } |
  PipeExpression { expression (!pipe PipeOperator expression)+ }
}

ObjectProperty { PropertyName ":" expression }

ArgumentList { "(" commaSep<expression> ")" }

type[@isGroup=Type] {
  @specialize[@name=PrimitiveType]<
    identifier,
    "string" | "number" | "bool" | "sketch_group" | "sketch_surface" | "extrude_group"
  > |
  ArrayType { type !member "[" "]" } |
  ObjectType { "{" commaSep<ObjectProperty { PropertyName ":" type }> "}" }
}

VariableDefinition { identifier }

VariableName { identifier }

@skip { whitespace | LineComment | BlockComment }

kw<term> { @specialize[@name={term}]<identifier, term> }

commaSep<term> { (term ("," term)*)? ","? }

@tokens {
  String[isolate] { "'" ("\\" _ | !['\\])* "'" | '"' ("\\" _ | !["\\])* '"' }

  Number { "." @digit+ | @digit+ ("." @digit*)? }
  @precedence { Number, "." }

  AddOp { "+" | "-" }
  MultOp { "/" | "*" | "\\" }
  ExpOp { "^" }
  CompOp { $[<>] "="? | "!=" | "==" }
  Equals { "=" }
  Arrow { "=>" }
  PipeOperator { "|>" }

  PipeSubstitution { "%" }

  identifier { (@asciiLetter | "_") (@asciiLetter | @digit | "_")* }
  PropertyName { identifier }
  TagDeclarator { "$" identifier }

  whitespace { @whitespace+ }

  LineComment[isolate] { "//" ![\n]* }
  BlockComment[isolate] { "/*" blockCommentRest }
  blockCommentRest { @eof | ![*] blockCommentRest | "*" blockCommentStar }
  blockCommentStar { @eof | "/" | ![/] blockCommentRest | "*" blockCommentStar }

  @precedence { LineComment, BlockComment, MultOp }

  Shebang { "#!" ![\n]* }

  "(" ")"
  "{" "}"
  "[" "]"
  "," "?" ":" "." ".."
}

@external propSource klcHighlight from "./highlight"

@detectDelim
