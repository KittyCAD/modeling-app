{
  "make this neon green please, use #39FF14": {
    "prompt": "make this neon green please, use #39FF14",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 6,
            "column": 5
          },
          "end": {
            "line": 6,
            "column": 32
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 10,
            "column": 13
          },
          "end": {
            "line": 10,
            "column": 46
          }
        },
        "file": "main.kcl"
      }
    ],
    "project_name": "test-project",
    "files": {
      "main.kcl": "import \"b.kcl\" as b\nsketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [57.81, 250.51])\n  |> line(end = [121.13, 56.63], tag = $seg02)\n  |> line(end = [83.37, -34.61], tag = $seg01)\n  |> line(end = [19.66, -116.4])\n  |> line(end = [-221.8, -41.69])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 200)\nsketch002 = startSketchOn(XZ)\n  |> startProfile(at = [-73.64, -42.89])\n  |> xLine(length = 173.71)\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> xLine(length = -156.98)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude002 = extrude(sketch002, length = 50)\nb\n",
      "b.kcl": "sketch003 = startSketchOn(XY)\n  |> startProfile(at = [52.92, 157.81])\n  |> angledLine(angle = 0, length = 176.4, tag = $rectangleSegmentA001)\n  |> angledLine(\n       angle = segAng(rectangleSegmentA001) - 90,\n       length = 53.4,\n       tag = $rectangleSegmentB001,\n     )\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude(sketch003, length = 20)\n"
    },
    "expectedFiles": {
      "main.kcl": "import \"b.kcl\" as b\nsketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [57.81, 250.51])\n  |> line(end = [121.13, 56.63], tag = $seg02)\n  |> line(end = [83.37, -34.61], tag = $seg01)\n  |> line(end = [19.66, -116.4])\n  |> line(end = [-221.8, -41.69])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 200)\n  |> appearance(color = \"#39FF14\")\nsketch002 = startSketchOn(XZ)\n  |> startProfile(at = [-73.64, -42.89])\n  |> xLine(length = 173.71)\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> xLine(length = -156.98)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude002 = extrude(sketch002, length = 50)\nb\n",
      "b.kcl": "sketch003 = startSketchOn(XY)\n  |> startProfile(at = [52.92, 157.81])\n  |> angledLine(angle = 0, length = 176.4, tag = $rectangleSegmentA001)\n  |> angledLine(\n       angle = segAng(rectangleSegmentA001) - 90,\n       length = 53.4,\n       tag = $rectangleSegmentB001,\n     )\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude(sketch003, length = 20)\n"
    }
  },
  "Change this to red please, #ff0000": {
    "prompt": "Change this to red please, #ff0000",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 82,
            "column": 5
          },
          "end": {
            "line": 82,
            "column": 35
          }
        },
        "file": "ball-bearing.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 90,
            "column": 5
          },
          "end": {
            "line": 90,
            "column": 35
          }
        },
        "file": "ball-bearing.kcl"
      }
    ],
    "project_name": "test-project",
    "files": {
      "ball-bearing.kcl": "// Pillow Block Bearing\n// The ball bearing for the pillow block bearing assembly\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Create the sketch of one of the balls. The ball diameter is sized as a fraction of the difference between inner and outer radius of the bearing\nballsSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [bearingBoreDiameter / 2 + 0.1, 0.001])\n  |> arc(angleEnd = 0, angleStart = 180, radius = sphereDia / 2)\n  |> close()\n\n// Revolve the ball to make a sphere and pattern around the inside wall\nballs = revolve(ballsSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the chain around the balls\nchainSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [\n       bearingBoreDiameter / 2 + 0.1 + sphereDia / 2 - (chainWidth / 2),\n       0.125 * sin(60deg)\n     ])\n  |> arc(angleEnd = 60, angleStart = 120, radius = sphereDia / 2)\n  |> line(end = [0, chainThickness])\n  |> line(end = [-chainWidth, 0])\n  |> close()\n\n// Revolve the chain sketch\nchainHead = revolve(chainSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the links in between the chains\nlinkSketch = startSketchOn(XZ)\n  |> circle(\n       center = [\n         bearingBoreDiameter / 2 + 0.1 + sphereDia / 2,\n         stockThickness / 2\n       ],\n       radius = linkDiameter / 2,\n     )\n\n// Create the walls of the bearing\nbearingBody = startSketchOn(XZ)\nbearingUpper = startProfile(\n       bearingBody,\n       at = [\n         bearingOuterDiameter / 2 - .07,\n         stockThickness\n       ],\n     )\n  |> angledLine(angle = -91, length = 0.05)\n  |> xLine(length = -(bearingOuterDiameter / 2 - (bearingBoreDiameter / 2)) + .145)\n  |> yLine(endAbsolute = 0.105)\n  |> xLine(length = -0.025)\n  |> angledLine(angle = 91, endAbsoluteY = profileStartY(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#121212\")\n\nbearingLower = startProfile(bearingBody, at = [bearingBoreDiameter / 2, 0.025])\n  |> xLine(length = 0.05)\n  |> angledLine(angle = 75, length = 0.04, tag = $seg01)\n  |> xLine(length = 0.05)\n  |> angledLine(angle = -75, length = segLen(seg01))\n  |> xLine(endAbsolute = bearingOuterDiameter / 2)\n  |> yLine(length = stockThickness)\n  |> xLine(length = -0.07)\n  |> angledLine(angle = -91, endAbsoluteY = profileStartY(%) + .075)\n  |> xLine(endAbsolute = profileStartX(%) + .05)\n  |> angledLine(angle = 91, endAbsoluteY = stockThickness * 1.25)\n  |> xLine(endAbsolute = profileStartX(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#f0f0f0\")\n\n// Revolve the link sketch\nrevolve(linkSketch, axis = Y, angle = 360 / 16)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n",
      "block.kcl": "// Pillow Block Bearing\n// The machined block for the pillow block bearing assembly. The block is dimensioned using the bolt pattern spacing, and each bolt hole includes a counterbore\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Calculate the dimensions of the block using the specified bolt spacing. The size of the block can be defined by adding a multiple of the counterbore diameter to the bolt spacing\nblockLength = boltSpacingX + counterboreDiameter + boltDiameter\nblockWidth = boltSpacingY + counterboreDiameter + boltDiameter\n\n// Draw the base plate\nplateSketch = startSketchOn(XY)\n  |> startProfile(at = [-blockLength / 2, -blockWidth / 2])\n  |> angledLine(angle = 0, length = blockLength, tag = $rectangleSegmentA001)\n  |> angledLine(angle = segAng(rectangleSegmentA001) + 90, length = blockWidth, tag = $rectangleSegmentB001)\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD001)\n  |> close()\n  |> subtract2d(tool = circle(center = [0, 0], radius = bearingOuterDiameter / 2))\nplateBody = extrude(plateSketch, length = stockThickness)\n  |> appearance(%, color = \"#1e62eb\")\n  |> fillet(\n       radius = boltDiameter * 1 / 3,\n       tags = [\n         getNextAdjacentEdge(rectangleSegmentB001),\n         getNextAdjacentEdge(rectangleSegmentA001),\n         getNextAdjacentEdge(rectangleSegmentC001),\n         getNextAdjacentEdge(rectangleSegmentD001)\n       ],\n     )\n\n// Define hole positions\nholePositions = [\n  [-boltSpacingX / 2, -boltSpacingY / 2],\n  [-boltSpacingX / 2, boltSpacingY / 2],\n  [boltSpacingX / 2, -boltSpacingY / 2],\n  [boltSpacingX / 2, boltSpacingY / 2]\n]\n\n// Function to create a counterbored hole\nfn counterbore(@holePosition) {\n  cbBore = startSketchOn(plateBody, face = END)\n    |> circle(center = holePosition, radius = counterboreDiameter / 2)\n    |> extrude(length = -counterboreDepth)\n  cbBolt = startSketchOn(cbBore, face = START)\n    |> circle(center = holePosition, radius = boltDiameter / 2, tag = $hole01)\n    |> extrude(length = -stockThickness + counterboreDepth)\n\n  return {  }\n}\n\n// Place a counterbored hole at each bolt hole position\nmap(holePositions, f = counterbore)\n",
      "main.kcl": "// Pillow Block Bearing\n// A bearing pillow block, also known as a plummer block or pillow block bearing, is a pedestal used to provide support for a rotating shaft with the help of compatible bearings and various accessories. Housing a bearing, the pillow block provides a secure and stable foundation that allows the shaft to rotate smoothly within its machinery setup. These components are essential in a wide range of mechanical systems and machinery, playing a key role in reducing friction and supporting radial and axial loads.\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import parts and parameters\nimport * from \"parameters.kcl\"\nimport \"ball-bearing.kcl\" as ballBearing\nimport \"block.kcl\" as block\n\n// Render each part\nballBearing\nblock\n",
      "parameters.kcl": "// Global parameters for the pillow block bearing\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Export parameters\nexport boltSpacingX = 5\nexport boltSpacingY = 3\nexport boltDiameter = 3 / 8\nexport counterboreDiameter = 3 / 4\nexport counterboreDepth = 3 / 16\nexport stockThickness = .5\nexport bearingBoreDiameter = 1 + 3 / 4\nexport bearingOuterDiameter = bearingBoreDiameter * 1.5\nexport sphereDia = (bearingOuterDiameter - bearingBoreDiameter) / 4\nexport chainWidth = sphereDia / 2\nexport chainThickness = sphereDia / 8\nexport linkDiameter = sphereDia / 4\n"
    },
    "expectedFiles": {
      "ball-bearing.kcl": "// Pillow Block Bearing\n// The ball bearing for the pillow block bearing assembly\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Create the sketch of one of the balls. The ball diameter is sized as a fraction of the difference between inner and outer radius of the bearing\nballsSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [bearingBoreDiameter / 2 + 0.1, 0.001])\n  |> arc(angleEnd = 0, angleStart = 180, radius = sphereDia / 2)\n  |> close()\n\n// Revolve the ball to make a sphere and pattern around the inside wall\nballs = revolve(ballsSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the chain around the balls\nchainSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [\n       bearingBoreDiameter / 2 + 0.1 + sphereDia / 2 - (chainWidth / 2),\n       0.125 * sin(60deg)\n     ])\n  |> arc(angleEnd = 60, angleStart = 120, radius = sphereDia / 2)\n  |> line(end = [0, chainThickness])\n  |> line(end = [-chainWidth, 0])\n  |> close()\n\n// Revolve the chain sketch\nchainHead = revolve(chainSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the links in between the chains\nlinkSketch = startSketchOn(XZ)\n  |> circle(\n       center = [\n         bearingBoreDiameter / 2 + 0.1 + sphereDia / 2,\n         stockThickness / 2\n       ],\n       radius = linkDiameter / 2,\n     )\n\n// Create the walls of the bearing\nbearingBody = startSketchOn(XZ)\nbearingUpper = startProfile(\n       bearingBody,\n       at = [\n         bearingOuterDiameter / 2 - .07,\n         stockThickness\n       ],\n     )\n  |> angledLine(angle = -91, length = 0.05)\n  |> xLine(length = -(bearingOuterDiameter / 2 - (bearingBoreDiameter / 2)) + .145)\n  |> yLine(endAbsolute = 0.105)\n  |> xLine(length = -0.025)\n  |> angledLine(angle = 91, endAbsoluteY = profileStartY(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#121212\")\n\nbearingLower = startProfile(bearingBody, at = [bearingBoreDiameter / 2, 0.025])\n  |> xLine(length = 0.05)\n  |> angledLine(angle = 75, length = 0.04, tag = $seg01)\n  |> xLine(length = 0.05)\n  |> angledLine(angle = -75, length = segLen(seg01))\n  |> xLine(endAbsolute = bearingOuterDiameter / 2)\n  |> yLine(length = stockThickness)\n  |> xLine(length = -0.07)\n  |> angledLine(angle = -91, endAbsoluteY = profileStartY(%) + .075)\n  |> xLine(endAbsolute = profileStartX(%) + .05)\n  |> angledLine(angle = 91, endAbsoluteY = stockThickness * 1.25)\n  |> xLine(endAbsolute = profileStartX(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#ff0000\")\n\n// Revolve the link sketch\nrevolve(linkSketch, axis = Y, angle = 360 / 16)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n",
      "block.kcl": "// Pillow Block Bearing\n// The machined block for the pillow block bearing assembly. The block is dimensioned using the bolt pattern spacing, and each bolt hole includes a counterbore\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Calculate the dimensions of the block using the specified bolt spacing. The size of the block can be defined by adding a multiple of the counterbore diameter to the bolt spacing\nblockLength = boltSpacingX + counterboreDiameter + boltDiameter\nblockWidth = boltSpacingY + counterboreDiameter + boltDiameter\n\n// Draw the base plate\nplateSketch = startSketchOn(XY)\n  |> startProfile(at = [-blockLength / 2, -blockWidth / 2])\n  |> angledLine(angle = 0, length = blockLength, tag = $rectangleSegmentA001)\n  |> angledLine(angle = segAng(rectangleSegmentA001) + 90, length = blockWidth, tag = $rectangleSegmentB001)\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD001)\n  |> close()\n  |> subtract2d(tool = circle(center = [0, 0], radius = bearingOuterDiameter / 2))\nplateBody = extrude(plateSketch, length = stockThickness)\n  |> appearance(%, color = \"#1e62eb\")\n  |> fillet(\n       radius = boltDiameter * 1 / 3,\n       tags = [\n         getNextAdjacentEdge(rectangleSegmentB001),\n         getNextAdjacentEdge(rectangleSegmentA001),\n         getNextAdjacentEdge(rectangleSegmentC001),\n         getNextAdjacentEdge(rectangleSegmentD001)\n       ],\n     )\n\n// Define hole positions\nholePositions = [\n  [-boltSpacingX / 2, -boltSpacingY / 2],\n  [-boltSpacingX / 2, boltSpacingY / 2],\n  [boltSpacingX / 2, -boltSpacingY / 2],\n  [boltSpacingX / 2, boltSpacingY / 2]\n]\n\n// Function to create a counterbored hole\nfn counterbore(@holePosition) {\n  cbBore = startSketchOn(plateBody, face = END)\n    |> circle(center = holePosition, radius = counterboreDiameter / 2)\n    |> extrude(length = -counterboreDepth)\n  cbBolt = startSketchOn(cbBore, face = START)\n    |> circle(center = holePosition, radius = boltDiameter / 2, tag = $hole01)\n    |> extrude(length = -stockThickness + counterboreDepth)\n\n  return {  }\n}\n\n// Place a counterbored hole at each bolt hole position\nmap(holePositions, f = counterbore)\n",
      "main.kcl": "// Pillow Block Bearing\n// A bearing pillow block, also known as a plummer block or pillow block bearing, is a pedestal used to provide support for a rotating shaft with the help of compatible bearings and various accessories. Housing a bearing, the pillow block provides a secure and stable foundation that allows the shaft to rotate smoothly within its machinery setup. These components are essential in a wide range of mechanical systems and machinery, playing a key role in reducing friction and supporting radial and axial loads.\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import parts and parameters\nimport * from \"parameters.kcl\"\nimport \"ball-bearing.kcl\" as ballBearing\nimport \"block.kcl\" as block\n\n// Render each part\nballBearing\nblock\n",
      "parameters.kcl": "// Global parameters for the pillow block bearing\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Export parameters\nexport boltSpacingX = 5\nexport boltSpacingY = 3\nexport boltDiameter = 3 / 8\nexport counterboreDiameter = 3 / 4\nexport counterboreDepth = 3 / 16\nexport stockThickness = .5\nexport bearingBoreDiameter = 1 + 3 / 4\nexport bearingOuterDiameter = bearingBoreDiameter * 1.5\nexport sphereDia = (bearingOuterDiameter - bearingBoreDiameter) / 4\nexport chainWidth = sphereDia / 2\nexport chainThickness = sphereDia / 8\nexport linkDiameter = sphereDia / 4\n"
    }
  },
  "pattern this cylinder 6 times around the center of the flange, before subtracting it from the flange": {
    "prompt": "pattern this cylinder 6 times around the center of the flange, before subtracting it from the flange",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 11,
            "column": 22
          },
          "end": {
            "line": 11,
            "column": 89
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 12,
            "column": 24
          },
          "end": {
            "line": 12,
            "column": 66
          }
        },
        "file": "main.kcl"
      }
    ],
    "project_name": "test-project",
    "files": {
      "main.kcl": "flangeHolesR = 6\nflangeBodySketch = startSketchOn(XY)\nflangeBodyProfile = circle(flangeBodySketch, center = [0, 0], radius = 100)\nflangePlate = extrude(flangeBodyProfile, length = 5)\nhigherPlane = offsetPlane(XY, offset = 10)\ninnerBoreSketch = startSketchOn(higherPlane)\ninnerBoreProfile = circle(innerBoreSketch, center = [0, 0], radius = 49.28)\ninnerBoreCylinder = extrude(innerBoreProfile, length = -10)\nflangeBody = subtract([flangePlate], tools = [innerBoreCylinder])\nmountingHoleSketch = startSketchOn(higherPlane)\nmountingHoleProfile = circle(mountingHoleSketch, center = [75, 0], radius = flangeHolesR)\nmountingHoleCylinders = extrude(mountingHoleProfile, length = -30)\n"
    },
    "expectedFiles": {
      "main.kcl": "flangeHolesR = 6\nflangeBodySketch = startSketchOn(XY)\nflangeBodyProfile = circle(flangeBodySketch, center = [0, 0], radius = 100)\nflangePlate = extrude(flangeBodyProfile, length = 5)\nhigherPlane = offsetPlane(XY, offset = 10)\ninnerBoreSketch = startSketchOn(higherPlane)\ninnerBoreProfile = circle(innerBoreSketch, center = [0, 0], radius = 49.28)\ninnerBoreCylinder = extrude(innerBoreProfile, length = -10)\nflangeBody = subtract([flangePlate], tools = [innerBoreCylinder])\nmountingHoleSketch = startSketchOn(higherPlane)\nmountingHoleProfile = circle(mountingHoleSketch, center = [75, 0], radius = flangeHolesR)\nmountingHoleCylinders = extrude(mountingHoleProfile, length = -30)\n  |> patternCircular3d(instances = 6, axis = Z, center = [0, 0, 0])\nflange = subtract([flangeBody], tools = [mountingHoleCylinders])\n"
    }
  },
  "fillet these two edges please": {
    "prompt": "fillet these two edges please",
    "source_ranges": [
      {
        "prompt": "The users main selection is the edge of a general-sweep (that is an extrusion, revolve, sweep or loft).\nit is an opposite edge, in order to refer to this edge you should add a tag to the segment function in this source range,\nand then use the function getOppositeEdge\nSee later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 3,
            "column": 5
          },
          "end": {
            "line": 3,
            "column": 26
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 11,
            "column": 13
          },
          "end": {
            "line": 11,
            "column": 45
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "The users main selection is the edge of a general-sweep (that is an extrusion, revolve, sweep or loft).\nit is an opposite edge, in order to refer to this edge you should add a tag to the segment function in this source range,\nand then use the function getOppositeEdge\nSee later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 7,
            "column": 5
          },
          "end": {
            "line": 7,
            "column": 27
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 11,
            "column": 13
          },
          "end": {
            "line": 11,
            "column": 45
          }
        },
        "file": "main.kcl"
      }
    ],
    "project_name": "test-project",
    "files": {
      "main.kcl": "sketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [18.47, 15.31])\n  |> yLine(length = 28.26)\n  |> line(end = [55.52, 21.93])\n  |> tangentialArc(endAbsolute = [136.09, 36.87])\n  |> yLine(length = -45.48)\n  |> xLine(length = -13.76)\n  |> yLine(length = 8.61)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 10)\n"
    },
    "expectedFiles": {
      "main.kcl": "sketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [18.47, 15.31])\n  |> yLine(length = 28.26, tag = $seg02)\n  |> line(end = [55.52, 21.93], tag = $seg01)\n  |> tangentialArc(endAbsolute = [136.09, 36.87])\n  |> yLine(length = -45.48)\n  |> xLine(length = -13.76, tag = $seg03)\n  |> yLine(length = 8.61)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 10, tagEnd = $capEnd001)\n  |> fillet(\n       radius = 1,\n       tags = [\n         getCommonEdge(faces = [seg01, seg02]),\n         getCommonEdge(faces = [seg03, capEnd001])\n       ],\n     )\n"
    }
  }
}