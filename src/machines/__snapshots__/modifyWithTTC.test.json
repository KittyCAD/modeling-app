{
  "make this neon green please, use #39FF14": {
    "prompt": "make this neon green please, use #39FF14",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 6,
            "column": 5
          },
          "end": {
            "line": 6,
            "column": 32
          }
        },
        "file": "main.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 10,
            "column": 13
          },
          "end": {
            "line": 10,
            "column": 46
          }
        },
        "file": "main.kcl"
      }
    ],
    "project_name": "test-project",
    "kcl_version": "0.2.78",
    "files": {
      "main.kcl": "import \"b.kcl\" as b\nsketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [57.81, 250.51])\n  |> line(end = [121.13, 56.63], tag = $seg02)\n  |> line(end = [83.37, -34.61], tag = $seg01)\n  |> line(end = [19.66, -116.4])\n  |> line(end = [-221.8, -41.69])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 200)\nsketch002 = startSketchOn(XZ)\n  |> startProfile(at = [-73.64, -42.89])\n  |> xLine(length = 173.71)\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> xLine(length = -156.98)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude002 = extrude(sketch002, length = 50)\nb\n",
      "b.kcl": "sketch003 = startSketchOn(XY)\n  |> startProfile(at = [52.92, 157.81])\n  |> angledLine(angle = 0, length = 176.4, tag = $rectangleSegmentA001)\n  |> angledLine(\n       angle = segAng(rectangleSegmentA001) - 90,\n       length = 53.4,\n       tag = $rectangleSegmentB001,\n     )\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude(sketch003, length = 20)\n"
    },
    "expectedFiles": {
      "main.kcl": "import \"b.kcl\" as b\nsketch001 = startSketchOn(XZ)\nprofile001 = startProfile(sketch001, at = [57.81, 250.51])\n  |> line(end = [121.13, 56.63], tag = $seg02)\n  |> line(end = [83.37, -34.61], tag = $seg01)\n  |> line(end = [19.66, -116.4])\n  |> line(end = [-221.8, -41.69])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude001 = extrude(profile001, length = 200)\n  |> appearance(color = \"#39FF14\")\nsketch002 = startSketchOn(XZ)\n  |> startProfile(at = [-73.64, -42.89])\n  |> xLine(length = 173.71)\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(end = [-22.12, -50.4])\n  |> xLine(length = -156.98)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude002 = extrude(sketch002, length = 50)\nb\n",
      "b.kcl": "sketch003 = startSketchOn(XY)\n  |> startProfile(at = [52.92, 157.81])\n  |> angledLine(angle = 0, length = 176.4, tag = $rectangleSegmentA001)\n  |> angledLine(\n       angle = segAng(rectangleSegmentA001) - 90,\n       length = 53.4,\n       tag = $rectangleSegmentB001,\n     )\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(end = [-22.12, -50.4])\n  |> line(end = [-22.12, -94.4])\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\nextrude(sketch003, length = 20)\n"
    }
  },
  "Can you please pattern this nut 4 times, the same way the bolt and washer has been done already.": {
    "prompt": "Can you please pattern this nut 4 times, the same way the bolt and washer has been done already.",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 82,
            "column": 5
          },
          "end": {
            "line": 82,
            "column": 35
          }
        },
        "file": "ball-bearing.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 90,
            "column": 5
          },
          "end": {
            "line": 90,
            "column": 35
          }
        },
        "file": "ball-bearing.kcl"
      }
    ],
    "project_name": "test-project",
    "kcl_version": "0.2.78",
    "files": {
      "ball-bearing.kcl": "// Pillow Block Bearing\n// The ball bearing for the pillow block bearing assembly\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Create the sketch of one of the balls. The ball diameter is sized as a fraction of the difference between inner and outer radius of the bearing\nballsSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [bearingBoreDiameter / 2 + 0.1, 0.001])\n  |> arc(angleEnd = 0, angleStart = 180, radius = sphereDia / 2)\n  |> close()\n\n// Revolve the ball to make a sphere and pattern around the inside wall\nballs = revolve(ballsSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the chain around the balls\nchainSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [\n       bearingBoreDiameter / 2 + 0.1 + sphereDia / 2 - (chainWidth / 2),\n       0.125 * sin(60deg)\n     ])\n  |> arc(angleEnd = 60, angleStart = 120, radius = sphereDia / 2)\n  |> line(end = [0, chainThickness])\n  |> line(end = [-chainWidth, 0])\n  |> close()\n\n// Revolve the chain sketch\nchainHead = revolve(chainSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the links in between the chains\nlinkSketch = startSketchOn(XZ)\n  |> circle(\n       center = [\n         bearingBoreDiameter / 2 + 0.1 + sphereDia / 2,\n         stockThickness / 2\n       ],\n       radius = linkDiameter / 2,\n     )\n\n// Create the walls of the bearing\nbearingBody = startSketchOn(XZ)\nbearingUpper = startProfile(\n       bearingBody,\n       at = [\n         bearingOuterDiameter / 2 - .07,\n         stockThickness\n       ],\n     )\n  |> angledLine(angle = -91, length = 0.05)\n  |> xLine(length = -(bearingOuterDiameter / 2 - (bearingBoreDiameter / 2)) + .145)\n  |> yLine(endAbsolute = 0.105)\n  |> xLine(length = -0.025)\n  |> angledLine(angle = 91, endAbsoluteY = profileStartY(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#121212\")\n\nbearingLower = startProfile(bearingBody, at = [bearingBoreDiameter / 2, 0.025])\n  |> xLine(length = 0.05)\n  |> angledLine(angle = 75, length = 0.04, tag = $seg01)\n  |> xLine(length = 0.05)\n  |> angledLine(angle = -75, length = segLen(seg01))\n  |> xLine(endAbsolute = bearingOuterDiameter / 2)\n  |> yLine(length = stockThickness)\n  |> xLine(length = -0.07)\n  |> angledLine(angle = -91, endAbsoluteY = profileStartY(%) + .075)\n  |> xLine(endAbsolute = profileStartX(%) + .05)\n  |> angledLine(angle = 91, endAbsoluteY = stockThickness * 1.25)\n  |> xLine(endAbsolute = profileStartX(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#f0f0f0\")\n\n// Revolve the link sketch\nrevolve(linkSketch, axis = Y, angle = 360 / 16)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n",
      "block.kcl": "// Pillow Block Bearing\n// The machined block for the pillow block bearing assembly. The block is dimensioned using the bolt pattern spacing, and each bolt hole includes a counterbore\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Calculate the dimensions of the block using the specified bolt spacing. The size of the block can be defined by adding a multiple of the counterbore diameter to the bolt spacing\nblockLength = boltSpacingX + counterboreDiameter + boltDiameter\nblockWidth = boltSpacingY + counterboreDiameter + boltDiameter\n\n// Draw the base plate\nplateSketch = startSketchOn(XY)\n  |> startProfile(at = [-blockLength / 2, -blockWidth / 2])\n  |> angledLine(angle = 0, length = blockLength, tag = $rectangleSegmentA001)\n  |> angledLine(angle = segAng(rectangleSegmentA001) + 90, length = blockWidth, tag = $rectangleSegmentB001)\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD001)\n  |> close()\n  |> subtract2d(tool = circle(center = [0, 0], radius = bearingOuterDiameter / 2))\nplateBody = extrude(plateSketch, length = stockThickness)\n  |> appearance(%, color = \"#1e62eb\")\n  |> fillet(\n       radius = boltDiameter * 1 / 3,\n       tags = [\n         getNextAdjacentEdge(rectangleSegmentB001),\n         getNextAdjacentEdge(rectangleSegmentA001),\n         getNextAdjacentEdge(rectangleSegmentC001),\n         getNextAdjacentEdge(rectangleSegmentD001)\n       ],\n     )\n\n// Define hole positions\nholePositions = [\n  [-boltSpacingX / 2, -boltSpacingY / 2],\n  [-boltSpacingX / 2, boltSpacingY / 2],\n  [boltSpacingX / 2, -boltSpacingY / 2],\n  [boltSpacingX / 2, boltSpacingY / 2]\n]\n\n// Function to create a counterbored hole\nfn counterbore(@holePosition) {\n  cbBore = startSketchOn(plateBody, face = END)\n    |> circle(center = holePosition, radius = counterboreDiameter / 2)\n    |> extrude(length = -counterboreDepth)\n  cbBolt = startSketchOn(cbBore, face = START)\n    |> circle(center = holePosition, radius = boltDiameter / 2, tag = $hole01)\n    |> extrude(length = -stockThickness + counterboreDepth)\n\n  return {  }\n}\n\n// Place a counterbored hole at each bolt hole position\nmap(holePositions, f = counterbore)\n",
      "main.kcl": "// Pillow Block Bearing\n// A bearing pillow block, also known as a plummer block or pillow block bearing, is a pedestal used to provide support for a rotating shaft with the help of compatible bearings and various accessories. Housing a bearing, the pillow block provides a secure and stable foundation that allows the shaft to rotate smoothly within its machinery setup. These components are essential in a wide range of mechanical systems and machinery, playing a key role in reducing friction and supporting radial and axial loads.\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import parts and parameters\nimport * from \"parameters.kcl\"\nimport \"ball-bearing.kcl\" as ballBearing\nimport \"block.kcl\" as block\n\n// Render each part\nballBearing\nblock\n",
      "parameters.kcl": "// Global parameters for the pillow block bearing\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Export parameters\nexport boltSpacingX = 5\nexport boltSpacingY = 3\nexport boltDiameter = 3 / 8\nexport counterboreDiameter = 3 / 4\nexport counterboreDepth = 3 / 16\nexport stockThickness = .5\nexport bearingBoreDiameter = 1 + 3 / 4\nexport bearingOuterDiameter = bearingBoreDiameter * 1.5\nexport sphereDia = (bearingOuterDiameter - bearingBoreDiameter) / 4\nexport chainWidth = sphereDia / 2\nexport chainThickness = sphereDia / 8\nexport linkDiameter = sphereDia / 4\n"
    },
    "expectedFiles": {
      "ball-bearing.kcl": "// Pillow Block Bearing\n// The ball bearing for the pillow block bearing assembly\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Create the sketch of one of the balls. The ball diameter is sized as a fraction of the difference between inner and outer radius of the bearing\nballsSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [bearingBoreDiameter / 2 + 0.1, 0.001])\n  |> arc(angleEnd = 0, angleStart = 180, radius = sphereDia / 2)\n  |> close()\n\n// Revolve the ball to make a sphere and pattern around the inside wall\nballs = revolve(ballsSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the chain around the balls\nchainSketch = startSketchOn(offsetPlane(XY, offset = stockThickness / 2))\n  |> startProfile(at = [\n       bearingBoreDiameter / 2 + 0.1 + sphereDia / 2 - (chainWidth / 2),\n       0.125 * sin(60deg)\n     ])\n  |> arc(angleEnd = 60, angleStart = 120, radius = sphereDia / 2)\n  |> line(end = [0, chainThickness])\n  |> line(end = [-chainWidth, 0])\n  |> close()\n\n// Revolve the chain sketch\nchainHead = revolve(chainSketch, axis = X)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n\n// Create the sketch for the links in between the chains\nlinkSketch = startSketchOn(XZ)\n  |> circle(\n       center = [\n         bearingBoreDiameter / 2 + 0.1 + sphereDia / 2,\n         stockThickness / 2\n       ],\n       radius = linkDiameter / 2,\n     )\n\n// Create the walls of the bearing\nbearingBody = startSketchOn(XZ)\nbearingUpper = startProfile(\n       bearingBody,\n       at = [\n         bearingOuterDiameter / 2 - .07,\n         stockThickness\n       ],\n     )\n  |> angledLine(angle = -91, length = 0.05)\n  |> xLine(length = -(bearingOuterDiameter / 2 - (bearingBoreDiameter / 2)) + .145)\n  |> yLine(endAbsolute = 0.105)\n  |> xLine(length = -0.025)\n  |> angledLine(angle = 91, endAbsoluteY = profileStartY(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#121212\")\n\nbearingLower = startProfile(bearingBody, at = [bearingBoreDiameter / 2, 0.025])\n  |> xLine(length = 0.05)\n  |> angledLine(angle = 75, length = 0.04, tag = $seg01)\n  |> xLine(length = 0.05)\n  |> angledLine(angle = -75, length = segLen(seg01))\n  |> xLine(endAbsolute = bearingOuterDiameter / 2)\n  |> yLine(length = stockThickness)\n  |> xLine(length = -0.07)\n  |> angledLine(angle = -91, endAbsoluteY = profileStartY(%) + .075)\n  |> xLine(endAbsolute = profileStartX(%) + .05)\n  |> angledLine(angle = 91, endAbsoluteY = stockThickness * 1.25)\n  |> xLine(endAbsolute = profileStartX(%))\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)])\n  |> close()\n  |> revolve(angle = 360, axis = Y)\n  |> appearance(%, color = \"#ff0000\")\n\n// Revolve the link sketch\nrevolve(linkSketch, axis = Y, angle = 360 / 16)\n  |> patternCircular3d(\n       arcDegrees = 360,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       instances = 16,\n       rotateDuplicates = true,\n     )\n",
      "block.kcl": "// Pillow Block Bearing\n// The machined block for the pillow block bearing assembly. The block is dimensioned using the bolt pattern spacing, and each bolt hole includes a counterbore\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import Parameters\nimport * from \"parameters.kcl\"\n\n// Calculate the dimensions of the block using the specified bolt spacing. The size of the block can be defined by adding a multiple of the counterbore diameter to the bolt spacing\nblockLength = boltSpacingX + counterboreDiameter + boltDiameter\nblockWidth = boltSpacingY + counterboreDiameter + boltDiameter\n\n// Draw the base plate\nplateSketch = startSketchOn(XY)\n  |> startProfile(at = [-blockLength / 2, -blockWidth / 2])\n  |> angledLine(angle = 0, length = blockLength, tag = $rectangleSegmentA001)\n  |> angledLine(angle = segAng(rectangleSegmentA001) + 90, length = blockWidth, tag = $rectangleSegmentB001)\n  |> angledLine(angle = segAng(rectangleSegmentA001), length = -segLen(rectangleSegmentA001), tag = $rectangleSegmentC001)\n  |> line(endAbsolute = [profileStartX(%), profileStartY(%)], tag = $rectangleSegmentD001)\n  |> close()\n  |> subtract2d(tool = circle(center = [0, 0], radius = bearingOuterDiameter / 2))\nplateBody = extrude(plateSketch, length = stockThickness)\n  |> appearance(%, color = \"#1e62eb\")\n  |> fillet(\n       radius = boltDiameter * 1 / 3,\n       tags = [\n         getNextAdjacentEdge(rectangleSegmentB001),\n         getNextAdjacentEdge(rectangleSegmentA001),\n         getNextAdjacentEdge(rectangleSegmentC001),\n         getNextAdjacentEdge(rectangleSegmentD001)\n       ],\n     )\n\n// Define hole positions\nholePositions = [\n  [-boltSpacingX / 2, -boltSpacingY / 2],\n  [-boltSpacingX / 2, boltSpacingY / 2],\n  [boltSpacingX / 2, -boltSpacingY / 2],\n  [boltSpacingX / 2, boltSpacingY / 2]\n]\n\n// Function to create a counterbored hole\nfn counterbore(@holePosition) {\n  cbBore = startSketchOn(plateBody, face = END)\n    |> circle(center = holePosition, radius = counterboreDiameter / 2)\n    |> extrude(length = -counterboreDepth)\n  cbBolt = startSketchOn(cbBore, face = START)\n    |> circle(center = holePosition, radius = boltDiameter / 2, tag = $hole01)\n    |> extrude(length = -stockThickness + counterboreDepth)\n\n  return {  }\n}\n\n// Place a counterbored hole at each bolt hole position\nmap(holePositions, f = counterbore)\n",
      "main.kcl": "// Pillow Block Bearing\n// A bearing pillow block, also known as a plummer block or pillow block bearing, is a pedestal used to provide support for a rotating shaft with the help of compatible bearings and various accessories. Housing a bearing, the pillow block provides a secure and stable foundation that allows the shaft to rotate smoothly within its machinery setup. These components are essential in a wide range of mechanical systems and machinery, playing a key role in reducing friction and supporting radial and axial loads.\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Import parts and parameters\nimport * from \"parameters.kcl\"\nimport \"ball-bearing.kcl\" as ballBearing\nimport \"block.kcl\" as block\n\n// Render each part\nballBearing\nblock\n",
      "parameters.kcl": "// Global parameters for the pillow block bearing\n\n// Set units\n@settings(defaultLengthUnit = in)\n\n// Export parameters\nexport boltSpacingX = 5\nexport boltSpacingY = 3\nexport boltDiameter = 3 / 8\nexport counterboreDiameter = 3 / 4\nexport counterboreDepth = 3 / 16\nexport stockThickness = .5\nexport bearingBoreDiameter = 1 + 3 / 4\nexport bearingOuterDiameter = bearingBoreDiameter * 1.5\nexport sphereDia = (bearingOuterDiameter - bearingBoreDiameter) / 4\nexport chainWidth = sphereDia / 2\nexport chainThickness = sphereDia / 8\nexport linkDiameter = sphereDia / 4\n"
    }
  },
  "Change this to red please, #ff0000": {
    "prompt": "Change this to red please, #ff0000",
    "source_ranges": [
      {
        "prompt": "The users main selection is the wall of a general-sweep (that is an extrusion, revolve, sweep or loft).\nThe source range though is for the original segment before it was extruded, you can add a tag to that segment in order to refer to this wall, for example \"startSketchOn(someSweepVariable, face = segmentTag)\"\nBut it's also worth bearing in mind that the user may have intended to select the sweep itself, not this individual wall, see later source ranges for more context. about the sweep",
        "range": {
          "start": {
            "line": 19,
            "column": 7
          },
          "end": {
            "line": 19,
            "column": 57
          }
        },
        "file": "95479a127-hex-nut.kcl"
      },
      {
        "prompt": "This is the sweep's source range from the user's main selection of the end cap.",
        "range": {
          "start": {
            "line": 24,
            "column": 7
          },
          "end": {
            "line": 24,
            "column": 40
          }
        },
        "file": "95479a127-hex-nut.kcl"
      }
    ],
    "project_name": "test-project",
    "kcl_version": "0.2.78",
    "files": {
      "1120t74-pipe.kcl": "// Pipe\n// Piping for the pipe flange assembly\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport pipeInnerDiameter, pipeOuterDiameter, pipeLength from \"parameters.kcl\"\n\n// Create a function to make the pipe. Export\nexport fn pipe() {\n  // Create the pipe base\n  pipeBase = startSketchOn(XZ)\n    |> circle(%, center = [0, 0], radius = pipeOuterDiameter / 2)\n    |> extrude(%, length = pipeLength)\n\n  // Extrude a hole through the length of the pipe\n  pipe = startSketchOn(pipeBase, face = END)\n    |> circle(center = [0, 0], radius = pipeInnerDiameter / 2)\n    |> extrude(%, length = -pipeLength)\n    |> appearance(color = \"#a24ed0\")\n  return pipe\n}\n",
      "68095k348-flange.kcl": "// Flange\n// Flange used for mating two pipes together in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport pipeDiameter, mountingHoleDiameter, mountingHolePlacementDiameter, flangeDiameter, flangeTotalThickness, flangeBackHeight, flangeFrontHeight, flangeBaseThickness, flangeBackDiameter, flangeFrontDiameter from \"parameters.kcl\"\n\n// Create a function to create the flange. We must create a function since we are using multiple flanges.\nexport fn flange() {\n  // Sketch the mounting hole pattern\n  mountingHoles = startSketchOn(XY)\n    |> circle(%, center = [0, mountingHolePlacementDiameter / 2], radius = mountingHoleDiameter / 2)\n    |> patternCircular2d(\n         %,\n         instances = 4,\n         center = [0, 0],\n         arcDegrees = 360,\n         rotateDuplicates = false,\n       )\n\n  // Create the flange base\n  flangeBase = startSketchOn(XY)\n    |> circle(%, center = [0, 0], radius = flangeDiameter / 2)\n    |> subtract2d(tool = mountingHoles)\n    |> extrude(%, length = flangeBaseThickness)\n\n  // Create both the raised portions on the front and back of the flange base\n  flangeBack = startSketchOn(flangeBase, face = START)\n    |> circle(%, center = [0, 0], radius = flangeBackDiameter / 2)\n    |> extrude(%, length = flangeBackHeight)\n  flangeFront = startSketchOn(flangeBase, face = END)\n    |> circle(%, center = [0, 0], radius = flangeFrontDiameter / 2)\n    |> extrude(%, length = flangeFrontHeight)\n\n  // Create the circular cut in the center for the pipe\n  pipeCut = startSketchOn(flangeFront, face = END)\n    |> circle(%, center = [0, 0], radius = pipeDiameter / 2)\n    |> extrude(%, length = -flangeTotalThickness)\n    |> appearance(%, color = \"#bab0b0\")\n\n  return pipeCut\n}\n",
      "91251a404-bolt.kcl": "// Socket Head Cap Screw\n// screw for mating the flanges together in the pipe flange assembly\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport boltDiameter, boltLength, boltHeadLength, boltHeadDiameter, boltHexDrive, boltHexFlatLength, boltThreadLength from \"parameters.kcl\"\n\n// Create a function to make a the bolt\nexport fn bolt() {\n  // Create the head of the cap screw\n  boltHead = startSketchOn(XZ)\n    |> circle(center = [0, 0], radius = boltHeadDiameter / 2, tag = $topEdge)\n    |> extrude(length = -boltHeadLength)\n    |> fillet(radius = 0.020, tags = [topEdge, getOppositeEdge(topEdge)])\n\n  // Define the sketch of the hex pattern on the screw head and extrude into the head\n  hexPatternSketch = startSketchOn(boltHead, face = START)\n    |> startProfile(at = [\n         boltHexDrive / 2,\n         boltHexFlatLength / 2\n       ])\n    |> angledLine(angle = 270, length = boltHexFlatLength)\n    |> angledLine(angle = 210, length = boltHexFlatLength)\n    |> angledLine(angle = 150, length = boltHexFlatLength)\n    |> angledLine(angle = 90, length = boltHexFlatLength)\n    |> angledLine(angle = 30, length = boltHexFlatLength)\n    |> close()\n    |> extrude(length = -boltHeadLength * 0.75)\n\n  // create the body of the bolt\n  boltBody = startSketchOn(boltHead, face = END)\n    |> circle(center = [0, 0], radius = boltDiameter / 2, tag = $filletEdge)\n    |> extrude(length = boltLength)\n    |> appearance(color = \"#4dd043\", metalness = 90, roughness = 90)\n\n  return boltBody\n}\n",
      "9472k188-gasket.kcl": "// Gasket\n// Gasket for the pipe flange assembly. A gasket is a mechanical seal that fills the space between two or more mating surfaces, preventing leaks of liquids or gases under compression\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport gasketOutsideDiameter, gasketInnerDiameter, gasketThickness from \"parameters.kcl\"\n\n// Create the base of the gasket\ngasketBase = startSketchOn(XY)\n  |> circle(%, center = [0, 0], radius = gasketOutsideDiameter / 2)\n  |> extrude(%, length = gasketThickness)\n\n// Extrude a circular hole through the gasket base\nstartSketchOn(gasketBase, face = END)\n  |> circle(%, center = [0, 0], radius = gasketInnerDiameter / 2)\n  |> extrude(%, length = -gasketThickness)\n  |> appearance(%, color = \"#d0cb3e\")\n",
      "95479a127-hex-nut.kcl": "// Hex Nut\n// Hex nut for the screws in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport hexNutDiameter, hexNutFlatToFlat, hexNutThickness, hexNutFlatLength from \"parameters.kcl\"\n\n// Create a function to make the hex nut. Must be a function since multiple hex nuts are used\nexport fn hexNut() {\n  // Create the base of the hex nut\n  hexNutBase = startSketchOn(XY)\n    |> startProfile(at = [\n         hexNutFlatToFlat / 2,\n         hexNutFlatLength / 2\n       ])\n    |> angledLine(angle = 270, length = hexNutFlatLength)\n    |> angledLine(angle = 210, length = hexNutFlatLength)\n    |> angledLine(angle = 150, length = hexNutFlatLength)\n    |> angledLine(angle = 90, length = hexNutFlatLength)\n    |> angledLine(angle = 30, length = hexNutFlatLength)\n    |> close()\n    |> extrude(length = hexNutThickness)\n\n  // Create the hole in the center of the hex nut\n  hexNut = startSketchOn(hexNutBase, face = END)\n    |> circle(center = [0, 0], radius = hexNutDiameter / 2)\n    |> extrude(%, length = -hexNutThickness)\n    |> appearance(%, color = \"#4edfd5\")\n\n  return hexNut\n}\n",
      "98017a257-washer.kcl": "// 98017A257 Washer\n// Washer for the screws in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport washerInnerDia, washerOuterDia, washerThickness from \"parameters.kcl\"\n\n// Create a function to make the washer. Must be a function since multiple washers are used.\nexport fn washer() {\n  // Create the base of the washer\n  washerBase = startSketchOn(XY)\n    |> circle(center = [0, 0], radius = washerOuterDia / 2)\n    |> extrude(length = washerThickness)\n\n  // Extrude a hole through the washer\n  washer = startSketchOn(washerBase, face = END)\n    |> circle(center = [0, 0], radius = washerInnerDia / 2)\n    |> extrude(%, length = -washerThickness)\n    |> appearance(%, color = \"#ee4f4f\")\n\n  return washer\n}\n",
      "main.kcl": "// Pipe and Flange Assembly\n// A crucial component in various piping systems, designed to facilitate the connection, disconnection, and access to piping for inspection, cleaning, and modifications. This assembly combines pipes (long cylindrical conduits) with flanges (plate-like fittings) to create a secure yet detachable joint.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport * from \"parameters.kcl\"\n\n// Import parts\nimport \"9472k188-gasket.kcl\" as gasket\nimport flange from \"68095k348-flange.kcl\"\nimport washer from \"98017a257-washer.kcl\"\nimport bolt from \"91251a404-bolt.kcl\"\nimport hexNut from \"95479a127-hex-nut.kcl\"\nimport pipe from \"1120t74-pipe.kcl\"\n\n// Place flanges\nflange()\nflange()\n  |> rotate(axis = [0, 1, 0], angle = 180)\n  |> translate(x = 0, y = 0, z = flangeBackHeight * 2 + gasketThickness)\n\n// Place gasket between the flanges\ngasket\n  |> translate(x = 0, y = 0, z = -flangeBackHeight - gasketThickness)\n\n// Place eight washers (four front, four back)\nwasher()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = flangeBaseThickness)\n  |> patternCircular3d(\n       %,\n       instances = 4,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       arcDegrees = 360,\n       rotateDuplicates = false,\n     )\n  |> patternLinear3d(\n       %,\n       instances = 2,\n       distance = -(flangeBaseThickness * 2 + flangeBackHeight * 2 + gasketThickness + washerThickness),\n       axis = [0, 0, 1],\n     )\n\n// Place four bolts\nbolt()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = flangeBaseThickness + washerThickness)\n  |> rotate(roll = 90, pitch = 0, yaw = 0)\n  |> patternCircular3d(\n       %,\n       instances = 4,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       arcDegrees = 360,\n       rotateDuplicates = false,\n     )\n\n// Place four hex nuts\nhexNut()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = -(flangeBackHeight * 2 + gasketThickness + flangeBaseThickness + washerThickness + hexNutThickness))\n\n// Place both pieces of pipe\npipe()\n  |> rotate(\n       %,\n       roll = -90,\n       pitch = 0,\n       yaw = 0,\n     )\n  |> translate(\n       %,\n       x = 0,\n       y = 0,\n       z = flangeBaseThickness + flangeFrontHeight - 0.5,\n       global = true,\n     )\n\npipe()\n  |> rotate(\n       %,\n       roll = 90,\n       pitch = 0,\n       yaw = 0,\n     )\n  |> translate(\n       %,\n       x = 0,\n       y = 0,\n       z = -(flangeBackHeight * 2 + gasketThickness + flangeBaseThickness + flangeFrontHeight - 0.5),\n       global = true,\n     )\n",
      "parameters.kcl": "// Parameters\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Flange (68095K348)\nexport pipeDiameter = 2.440\nexport mountingHoleDiameter = 0.750\nexport mountingHolePlacementDiameter = 4.750\n\nexport flangeDiameter = 6.0\nexport flangeTotalThickness = 1.0\nexport flangeBackHeight = 0.060\nexport flangeFrontHeight = 0.250\nexport flangeBaseThickness = flangeTotalThickness - flangeBackHeight - flangeFrontHeight\n\nexport flangeBackDiameter = 3.620\nexport flangeFrontDiameter = 3.060\n\n// Washer (98017A257)\nexport washerInnerDia = 0.640\nexport washerOuterDia = 1.188\nexport washerThickness = 0.032\n\n// Bolt (91251A404)\nexport boltDiameter = 0.625\nexport boltLength = 2.500\nexport boltHeadLength = boltDiameter\nexport boltHeadDiameter = 0.938\nexport boltHexDrive = 1 / 2\nexport boltHexFlatLength = boltHexDrive / (2 * cos(30deg))\nexport boltThreadLength = 1.750\n\n// Hex nut (95479A127)\nexport hexNutDiameter = 5 / 8\nexport hexNutFlatToFlat = 15 / 16\nexport hexNutThickness = 35 / 64\nexport hexNutFlatLength = hexNutFlatToFlat / (2 * cos(30deg))\n\n// Gasket (9472K188)\nexport gasketOutsideDiameter = 4.125\nexport gasketInnerDiameter = 2.375\nexport gasketThickness = 0.031\n\n// Pipe (1120T74)\nexport pipeInnerDiameter = 2.0\nexport pipeOuterDiameter = 2.375\nexport pipeLength = 6\n"
    },
    "expectedFiles": {
      "1120t74-pipe.kcl": "// Pipe\n// Piping for the pipe flange assembly\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport pipeInnerDiameter, pipeOuterDiameter, pipeLength from \"parameters.kcl\"\n\n// Create a function to make the pipe. Export\nexport fn pipe() {\n  // Create the pipe base\n  pipeBase = startSketchOn(XZ)\n    |> circle(%, center = [0, 0], radius = pipeOuterDiameter / 2)\n    |> extrude(%, length = pipeLength)\n\n  // Extrude a hole through the length of the pipe\n  pipe = startSketchOn(pipeBase, face = END)\n    |> circle(center = [0, 0], radius = pipeInnerDiameter / 2)\n    |> extrude(%, length = -pipeLength)\n    |> appearance(color = \"#a24ed0\")\n  return pipe\n}\n",
      "68095k348-flange.kcl": "// Flange\n// Flange used for mating two pipes together in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport pipeDiameter, mountingHoleDiameter, mountingHolePlacementDiameter, flangeDiameter, flangeTotalThickness, flangeBackHeight, flangeFrontHeight, flangeBaseThickness, flangeBackDiameter, flangeFrontDiameter from \"parameters.kcl\"\n\n// Create a function to create the flange. We must create a function since we are using multiple flanges.\nexport fn flange() {\n  // Sketch the mounting hole pattern\n  mountingHoles = startSketchOn(XY)\n    |> circle(%, center = [0, mountingHolePlacementDiameter / 2], radius = mountingHoleDiameter / 2)\n    |> patternCircular2d(\n         %,\n         instances = 4,\n         center = [0, 0],\n         arcDegrees = 360,\n         rotateDuplicates = false,\n       )\n\n  // Create the flange base\n  flangeBase = startSketchOn(XY)\n    |> circle(%, center = [0, 0], radius = flangeDiameter / 2)\n    |> subtract2d(tool = mountingHoles)\n    |> extrude(%, length = flangeBaseThickness)\n\n  // Create both the raised portions on the front and back of the flange base\n  flangeBack = startSketchOn(flangeBase, face = START)\n    |> circle(%, center = [0, 0], radius = flangeBackDiameter / 2)\n    |> extrude(%, length = flangeBackHeight)\n  flangeFront = startSketchOn(flangeBase, face = END)\n    |> circle(%, center = [0, 0], radius = flangeFrontDiameter / 2)\n    |> extrude(%, length = flangeFrontHeight)\n\n  // Create the circular cut in the center for the pipe\n  pipeCut = startSketchOn(flangeFront, face = END)\n    |> circle(%, center = [0, 0], radius = pipeDiameter / 2)\n    |> extrude(%, length = -flangeTotalThickness)\n    |> appearance(%, color = \"#bab0b0\")\n\n  return pipeCut\n}\n",
      "91251a404-bolt.kcl": "// Socket Head Cap Screw\n// screw for mating the flanges together in the pipe flange assembly\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport boltDiameter, boltLength, boltHeadLength, boltHeadDiameter, boltHexDrive, boltHexFlatLength, boltThreadLength from \"parameters.kcl\"\n\n// Create a function to make a the bolt\nexport fn bolt() {\n  // Create the head of the cap screw\n  boltHead = startSketchOn(XZ)\n    |> circle(center = [0, 0], radius = boltHeadDiameter / 2, tag = $topEdge)\n    |> extrude(length = -boltHeadLength)\n    |> fillet(radius = 0.020, tags = [topEdge, getOppositeEdge(topEdge)])\n\n  // Define the sketch of the hex pattern on the screw head and extrude into the head\n  hexPatternSketch = startSketchOn(boltHead, face = START)\n    |> startProfile(at = [\n         boltHexDrive / 2,\n         boltHexFlatLength / 2\n       ])\n    |> angledLine(angle = 270, length = boltHexFlatLength)\n    |> angledLine(angle = 210, length = boltHexFlatLength)\n    |> angledLine(angle = 150, length = boltHexFlatLength)\n    |> angledLine(angle = 90, length = boltHexFlatLength)\n    |> angledLine(angle = 30, length = boltHexFlatLength)\n    |> close()\n    |> extrude(length = -boltHeadLength * 0.75)\n\n  // create the body of the bolt\n  boltBody = startSketchOn(boltHead, face = END)\n    |> circle(center = [0, 0], radius = boltDiameter / 2, tag = $filletEdge)\n    |> extrude(length = boltLength)\n    |> appearance(color = \"#4dd043\", metalness = 90, roughness = 90)\n\n  return boltBody\n}\n",
      "9472k188-gasket.kcl": "// Gasket\n// Gasket for the pipe flange assembly. A gasket is a mechanical seal that fills the space between two or more mating surfaces, preventing leaks of liquids or gases under compression\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport gasketOutsideDiameter, gasketInnerDiameter, gasketThickness from \"parameters.kcl\"\n\n// Create the base of the gasket\ngasketBase = startSketchOn(XY)\n  |> circle(%, center = [0, 0], radius = gasketOutsideDiameter / 2)\n  |> extrude(%, length = gasketThickness)\n\n// Extrude a circular hole through the gasket base\nstartSketchOn(gasketBase, face = END)\n  |> circle(%, center = [0, 0], radius = gasketInnerDiameter / 2)\n  |> extrude(%, length = -gasketThickness)\n  |> appearance(%, color = \"#d0cb3e\")\n",
      "95479a127-hex-nut.kcl": "// Hex Nut\n// Hex nut for the screws in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport hexNutDiameter, hexNutFlatToFlat, hexNutThickness, hexNutFlatLength from \"parameters.kcl\"\n\n// Create a function to make the hex nut. Must be a function since multiple hex nuts are used\nexport fn hexNut() {\n  // Create the base of the hex nut\n  hexNutBase = startSketchOn(XY)\n    |> startProfile(at = [\n         hexNutFlatToFlat / 2,\n         hexNutFlatLength / 2\n       ])\n    |> angledLine(angle = 270, length = hexNutFlatLength)\n    |> angledLine(angle = 210, length = hexNutFlatLength)\n    |> angledLine(angle = 150, length = hexNutFlatLength)\n    |> angledLine(angle = 90, length = hexNutFlatLength)\n    |> angledLine(angle = 30, length = hexNutFlatLength)\n    |> close()\n    |> extrude(length = hexNutThickness)\n\n  // Create the hole in the center of the hex nut\n  hexNut = startSketchOn(hexNutBase, face = END)\n    |> circle(center = [0, 0], radius = hexNutDiameter / 2)\n    |> extrude(%, length = -hexNutThickness)\n    |> appearance(%, color = \"#4edfd5\")\n\n  return hexNut\n}\n",
      "98017a257-washer.kcl": "// 98017A257 Washer\n// Washer for the screws in the pipe flange assembly.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport washerInnerDia, washerOuterDia, washerThickness from \"parameters.kcl\"\n\n// Create a function to make the washer. Must be a function since multiple washers are used.\nexport fn washer() {\n  // Create the base of the washer\n  washerBase = startSketchOn(XY)\n    |> circle(center = [0, 0], radius = washerOuterDia / 2)\n    |> extrude(length = washerThickness)\n\n  // Extrude a hole through the washer\n  washer = startSketchOn(washerBase, face = END)\n    |> circle(center = [0, 0], radius = washerInnerDia / 2)\n    |> extrude(%, length = -washerThickness)\n    |> appearance(%, color = \"#ee4f4f\")\n\n  return washer\n}\n",
      "main.kcl": "// Pipe and Flange Assembly\n// A crucial component in various piping systems, designed to facilitate the connection, disconnection, and access to piping for inspection, cleaning, and modifications. This assembly combines pipes (long cylindrical conduits) with flanges (plate-like fittings) to create a secure yet detachable joint.\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Import parameters\nimport * from \"parameters.kcl\"\n\n// Import parts\nimport \"9472k188-gasket.kcl\" as gasket\nimport flange from \"68095k348-flange.kcl\"\nimport washer from \"98017a257-washer.kcl\"\nimport bolt from \"91251a404-bolt.kcl\"\nimport hexNut from \"95479a127-hex-nut.kcl\"\nimport pipe from \"1120t74-pipe.kcl\"\n\n// Place flanges\nflange()\nflange()\n  |> rotate(axis = [0, 1, 0], angle = 180)\n  |> translate(x = 0, y = 0, z = flangeBackHeight * 2 + gasketThickness)\n\n// Place gasket between the flanges\ngasket\n  |> translate(x = 0, y = 0, z = -flangeBackHeight - gasketThickness)\n\n// Place eight washers (four front, four back)\nwasher()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = flangeBaseThickness)\n  |> patternCircular3d(\n       %,\n       instances = 4,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       arcDegrees = 360,\n       rotateDuplicates = false,\n     )\n  |> patternLinear3d(\n       %,\n       instances = 2,\n       distance = -(flangeBaseThickness * 2 + flangeBackHeight * 2 + gasketThickness + washerThickness),\n       axis = [0, 0, 1],\n     )\n\n// Place four bolts\nbolt()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = flangeBaseThickness + washerThickness)\n  |> rotate(roll = 90, pitch = 0, yaw = 0)\n  |> patternCircular3d(\n       %,\n       instances = 4,\n       axis = [0, 0, 1],\n       center = [0, 0, 0],\n       arcDegrees = 360,\n       rotateDuplicates = false,\n     )\n\n// Place four hex nuts\nhexNut()\n  |> translate(x = mountingHolePlacementDiameter / 2, y = 0, z = -(flangeBackHeight * 2 + gasketThickness + flangeBaseThickness + washerThickness + hexNutThickness))\n\n// Place both pieces of pipe\npipe()\n  |> rotate(\n       %,\n       roll = -90,\n       pitch = 0,\n       yaw = 0,\n     )\n  |> translate(\n       %,\n       x = 0,\n       y = 0,\n       z = flangeBaseThickness + flangeFrontHeight - 0.5,\n       global = true,\n     )\n\npipe()\n  |> rotate(\n       %,\n       roll = 90,\n       pitch = 0,\n       yaw = 0,\n     )\n  |> translate(\n       %,\n       x = 0,\n       y = 0,\n       z = -(flangeBackHeight * 2 + gasketThickness + flangeBaseThickness + flangeFrontHeight - 0.5),\n       global = true,\n     )\n",
      "parameters.kcl": "// Parameters\n\n// Set units\n@settings(defaultLengthUnit = in, kclVersion = 1.0)\n\n// Flange (68095K348)\nexport pipeDiameter = 2.440\nexport mountingHoleDiameter = 0.750\nexport mountingHolePlacementDiameter = 4.750\n\nexport flangeDiameter = 6.0\nexport flangeTotalThickness = 1.0\nexport flangeBackHeight = 0.060\nexport flangeFrontHeight = 0.250\nexport flangeBaseThickness = flangeTotalThickness - flangeBackHeight - flangeFrontHeight\n\nexport flangeBackDiameter = 3.620\nexport flangeFrontDiameter = 3.060\n\n// Washer (98017A257)\nexport washerInnerDia = 0.640\nexport washerOuterDia = 1.188\nexport washerThickness = 0.032\n\n// Bolt (91251A404)\nexport boltDiameter = 0.625\nexport boltLength = 2.500\nexport boltHeadLength = boltDiameter\nexport boltHeadDiameter = 0.938\nexport boltHexDrive = 1 / 2\nexport boltHexFlatLength = boltHexDrive / (2 * cos(30deg))\nexport boltThreadLength = 1.750\n\n// Hex nut (95479A127)\nexport hexNutDiameter = 5 / 8\nexport hexNutFlatToFlat = 15 / 16\nexport hexNutThickness = 35 / 64\nexport hexNutFlatLength = hexNutFlatToFlat / (2 * cos(30deg))\n\n// Gasket (9472K188)\nexport gasketOutsideDiameter = 4.125\nexport gasketInnerDiameter = 2.375\nexport gasketThickness = 0.031\n\n// Pipe (1120T74)\nexport pipeInnerDiameter = 2.0\nexport pipeOuterDiameter = 2.375\nexport pipeLength = 6\n"
    }
  }
}