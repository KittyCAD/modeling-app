on:
  push:
    branches:
      - main

  pull_request:
  workflow_dispatch:
permissions:
  contents: read
  pull-requests: write
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: cargo test
jobs:
  path-changes:
    runs-on: ubuntu-latest
    outputs:
      outside-kcl-samples: ${{ steps.filter.outputs.outside-kcl-samples }}

    steps:
      - uses: actions/checkout@v4

      - id: filter
        name: Check for path changes
        uses: dorny/paths-filter@v3
        with:
          predicate-quantifier: every
          filters: |
            outside-kcl-samples:
              - '!(public/kcl-samples/**)'
      - name: Display path changes
        run: |
          echo "Outside kcl-samples changes: ${{ steps.filter.outputs.outside-kcl-samples }}"

  cargotest:
    name: cargo test
    runs-on: ubuntu-latest-8-cores
    needs: path-changes
    steps:
      - uses: actions/checkout@v4
      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85
          override: true
          default: true
      - name: Install vector
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://sh.vector.dev > /tmp/vector.sh
          chmod +x /tmp/vector.sh
          /tmp/vector.sh -y -no-modify-path
          mkdir -p /tmp/vector
          cp .github/workflows/vector.toml /tmp/vector.toml
          sed -i "s#GITHUB_WORKFLOW#${GITHUB_WORKFLOW}#g" /tmp/vector.toml
          sed -i "s#GITHUB_REPOSITORY#${GITHUB_REPOSITORY}#g" /tmp/vector.toml
          sed -i "s#GITHUB_SHA#${GITHUB_SHA}#g" /tmp/vector.toml
          sed -i "s#GITHUB_REF_NAME#${GITHUB_REF_NAME}#g" /tmp/vector.toml
          sed -i "s#GH_ACTIONS_AXIOM_TOKEN#${{secrets.GH_ACTIONS_AXIOM_TOKEN}}#g" /tmp/vector.toml
          cat /tmp/vector.toml
          ${HOME}/.vector/bin/vector --config /tmp/vector.toml &
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.6.1
      - name: cargo test only kcl-samples
        id: cargo-test-kcl-samples
        if: needs.path-changes.outputs.outside-kcl-samples == 'false'
        continue-on-error: true
        shell: bash
        run: |-
          cd rust
          cargo nextest run --workspace --retries=2 --no-fail-fast -P ci simulation_tests::kcl_samples 2>&1 | tee /tmp/github-actions.log
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}
          RUST_BACKTRACE: full
          RUST_MIN_STACK: 10485760000
      - uses: taiki-e/install-action@just
        if: needs.path-changes.outputs.outside-kcl-samples == 'false' && steps.cargo-test-kcl-samples.outcome == 'failure'
      - name: Commit differences
        if: needs.path-changes.outputs.outside-kcl-samples == 'false' && steps.cargo-test-kcl-samples.outcome == 'failure'
        shell: bash
        run: |
          pushd rust/
          just overwrite-sim-test kcl-samples
          popd
          git add rust/kcl-lib/tests
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          echo ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git commit -m "Update kcl-samples simulation test output" || true
          git push origin ${{ github.head_ref }}
      - name: cargo test
        if: needs.path-changes.outputs.outside-kcl-samples == 'true'
        shell: bash
        run: |-
          cd rust
          cargo llvm-cov nextest --workspace --lcov --output-path lcov.info --retries=2 --no-fail-fast -P ci 2>&1 | tee /tmp/github-actions.log
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}
          RUST_MIN_STACK: 10485760000
      - name: Upload to codecov.io
        if: needs.path-changes.outputs.outside-kcl-samples == 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
          flags: rust
          verbose: true
          files: lcov.info

