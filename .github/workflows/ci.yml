name: CI 

on:
  pull_request:
  push:
    branches:
        - main
  release:
    types: [published]

jobs:
  # TODO: add check-format

  build-web:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: install ubuntu system dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn' # Set this to npm, yarn or pnpm.

      - run: yarn install

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: wasm prep
        shell: bash
        run: |
          mkdir src/wasm-lib/pkg; cd src/wasm-lib
          npx wasm-pack build --target web --out-dir pkg
          cd ../../
          cp src/wasm-lib/pkg/wasm_lib_bg.wasm public

      - name: macos sed
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          sed -i '' 's/import.meta.url//g' "./src/wasm-lib/pkg/wasm_lib.js"

      - name: ubuntu and windows sed
        if: matrix.os != 'macos-latest'
        shell: bash
        run: |
          sed -i 's/import.meta.url//g' "./src/wasm-lib/pkg/wasm_lib.js"

      - name: Fix format
        run: yarn fmt

  # TODO: add test-web

  build-apps-development:
    if: github.event_name == 'pull_request'
    needs: build-web
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
    steps:

      - name: Build the app for the current platform (no upload)
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}


  publish-apps-development:
    runs-on: 'ubuntu-20.04'
    if: github.event_name == 'pull_request'
    needs: [build-web, build-apps-development]
    steps:

      - uses: actions/upload-artifact@v3
        with:
          path: src-tauri/target/release/bundle
          name: modeling-app_macos_linux_windows


  build-apps-release:
    if: github.event_name == 'release'
    needs: build-web
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
    steps:

      - name: Build the app for the current platform and upload to release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ github.event.release.id }}


  publish-apps-release:
    runs-on: 'ubuntu-20.04'
    if: github.event_name == 'release'
    needs: [build-web, build-apps-release]
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CLOUD_DL_SA }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          project_id: kittycadapi
      
      - name: Upload release files to public bucket
        uses: google-github-actions/upload-cloud-storage@v1.0.3
        with:
          path: src-tauri/target/release/bundle/*/*
          destination: dl.kittycad.io/releases/modeling-app
