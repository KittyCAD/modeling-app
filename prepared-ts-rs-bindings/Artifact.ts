// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ArtifactId } from './ArtifactId'
import type { ModelingCmd } from './ModelingCmd'
import type { NodePath } from './NodePath'
import type { SourceRange } from './SourceRange'

export type Artifact =
  | ({ type: 'compositeSolid' } & CompositeSolid)
  | ({ type: 'plane' } & Plane)
  | ({ type: 'path' } & Path)
  | ({ type: 'segment' } & Segment)
  | ({ type: 'solid2d' } & Solid2d)
  | ({ type: 'planeOfFace' } & PlaneOfFace)
  | ({ type: 'startSketchOnFace' } & StartSketchOnFace)
  | ({ type: 'startSketchOnPlane' } & StartSketchOnPlane)
  | ({ type: 'sweep' } & Sweep)
  | ({ type: 'wall' } & Wall)
  | ({ type: 'cap' } & Cap)
  | ({ type: 'sweepEdge' } & SweepEdge)
  | ({ type: 'edgeCut' } & EdgeCut)
  | ({ type: 'edgeCutEdge' } & EdgeCutEdge)
  | ({ type: 'helix' } & Helix)

/**
 * A command that may create or update artifacts on the TS side.  Because
 * engine commands are batched, we don't have the response yet when these are
 * created.
 */
export type ArtifactCommand = {
  /**
   * Identifier of the command that can be matched with its response.
   */
  cmdId: string
  range: SourceRange
  /**
   * The engine command.  Each artifact command is backed by an engine
   * command.  In the future, we may need to send information to the TS side
   * without an engine command, in which case, we would make this field
   * optional.
   */
  command: ModelingCmd
}

export type ArtifactGraph = {
  map: { [key in ArtifactId]?: Artifact }
  itemCount: number
}

export type Cap = {
  id: ArtifactId
  subType: CapSubType
  edgeCutEdgeIds: Array<ArtifactId>
  sweepId: ArtifactId
  pathIds: Array<ArtifactId>
  /**
   * This is for the sketch-on-face plane, not for the cap itself.  Traverse
   * to the extrude and/or segment to get the cap's code_ref.
   */
  faceCodeRef: CodeRef
  /**
   * The command ID that got the data for this cap. Used for stable sorting.
   */
  cmdId: string
}

export type CapSubType = 'start' | 'end'

export type CodeRef = {
  range: SourceRange
  nodePath: NodePath
  pathToNode: Array<[string | number, string]>
}

export type CompositeSolid = {
  id: ArtifactId
  subType: CompositeSolidSubType
  /**
   * Constituent solids of the composite solid.
   */
  solidIds: Array<ArtifactId>
  /**
   * Tool solids used for asymmetric operations like subtract.
   */
  toolIds: Array<ArtifactId>
  codeRef: CodeRef
  /**
   * This is the ID of the composite solid that this is part of, if any, as a
   * composite solid can be used as input for another composite solid.
   */
  compositeSolidId?: ArtifactId | null
}

export type CompositeSolidSubType = 'intersect' | 'subtract' | 'union'

export type EdgeCut = {
  id: ArtifactId
  subType: EdgeCutSubType
  consumedEdgeId: ArtifactId
  edgeIds: Array<ArtifactId>
  surfaceId?: ArtifactId | null
  codeRef: CodeRef
}

export type EdgeCutEdge = {
  id: ArtifactId
  edgeCutId: ArtifactId
  surfaceId: ArtifactId
}

export type EdgeCutSubType = 'fillet' | 'chamfer'

export type Helix = {
  id: ArtifactId
  /**
   * The axis of the helix.  Currently this is always an edge ID, but we may
   * add axes to the graph.
   */
  axisId: ArtifactId | null
  codeRef: CodeRef
}

export type Path = {
  id: ArtifactId
  planeId: ArtifactId
  segIds: Array<ArtifactId>
  sweepId?: ArtifactId | null
  solid2dId?: ArtifactId | null
  codeRef: CodeRef
  /**
   * This is the ID of the composite solid that this is part of, if any, as
   * this can be used as input for another composite solid.
   */
  compositeSolidId?: ArtifactId | null
  /**
   * The hole, if any, from a subtract2d() call.
   */
  innerPathId?: ArtifactId | null
  /**
   * The `Path` that this is a hole of, if any. The inverse link of
   * `inner_path_id`.
   */
  outerPathId?: ArtifactId | null
}

export type Plane = {
  id: ArtifactId
  pathIds: Array<ArtifactId>
  codeRef: CodeRef
}

export type PlaneOfFace = {
  id: ArtifactId
  faceId: ArtifactId
  codeRef: CodeRef
}

export type Segment = {
  id: ArtifactId
  pathId: ArtifactId
  surfaceId?: ArtifactId | null
  edgeIds: Array<ArtifactId>
  edgeCutId?: ArtifactId | null
  codeRef: CodeRef
  commonSurfaceIds: Array<ArtifactId>
}

export type Solid2d = { id: ArtifactId; pathId: ArtifactId }

export type StartSketchOnFace = {
  id: ArtifactId
  faceId: ArtifactId
  codeRef: CodeRef
}

export type StartSketchOnPlane = {
  id: ArtifactId
  planeId: ArtifactId
  codeRef: CodeRef
}

/**
 * A sweep is a more generic term for extrude, revolve, loft, and sweep.
 */
export type Sweep = {
  id: ArtifactId
  subType: SweepSubType
  pathId: ArtifactId
  surfaceIds: Array<ArtifactId>
  edgeIds: Array<ArtifactId>
  codeRef: CodeRef
}

export type SweepEdge = {
  id: ArtifactId
  subType: SweepEdgeSubType
  segId: ArtifactId
  cmdId: string
  sweepId: ArtifactId
  commonSurfaceIds: Array<ArtifactId>
}

export type SweepEdgeSubType = 'opposite' | 'adjacent'

export type SweepSubType =
  | 'extrusion'
  | 'extrusionTwist'
  | 'revolve'
  | 'revolveAboutEdge'
  | 'loft'
  | 'sweep'

export type Wall = {
  id: ArtifactId
  segId: ArtifactId
  edgeCutEdgeIds: Array<ArtifactId>
  sweepId: ArtifactId
  pathIds: Array<ArtifactId>
  /**
   * This is for the sketch-on-face plane, not for the wall itself.  Traverse
   * to the extrude and/or segment to get the wall's code_ref.
   */
  faceCodeRef: CodeRef
  /**
   * The command ID that got the data for this wall. Used for stable sorting.
   */
  cmdId: string
}
