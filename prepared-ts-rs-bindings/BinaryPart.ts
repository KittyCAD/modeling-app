// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ArrayExpression } from './ArrayExpression'
import type { ArrayRangeExpression } from './ArrayRangeExpression'
import type { AscribedExpression } from './AscribedExpression'
import type { BinaryExpression } from './BinaryExpression'
import type { CallExpressionKw } from './CallExpressionKw'
import type { IfExpression } from './IfExpression'
import type { Literal } from './Literal'
import type { MemberExpression } from './MemberExpression'
import type { Name } from './Name'
import type { Node } from './Node'
import type { ObjectExpression } from './ObjectExpression'
import type { SketchVar } from './SketchVar'
import type { UnaryExpression } from './UnaryExpression'

export type BinaryPart =
  | ({ type: 'Literal' } & Node<Literal>)
  | ({ type: 'Name' } & Node<Name>)
  | ({ type: 'BinaryExpression' } & Node<BinaryExpression>)
  | ({ type: 'CallExpressionKw' } & Node<CallExpressionKw>)
  | ({ type: 'UnaryExpression' } & Node<UnaryExpression>)
  | ({ type: 'MemberExpression' } & Node<MemberExpression>)
  | ({ type: 'ArrayExpression' } & Node<ArrayExpression>)
  | ({ type: 'ArrayRangeExpression' } & Node<ArrayRangeExpression>)
  | ({ type: 'ObjectExpression' } & Node<ObjectExpression>)
  | ({ type: 'IfExpression' } & Node<IfExpression>)
  | ({ type: 'AscribedExpression' } & Node<AscribedExpression>)
  | ({ type: 'SketchVar' } & Node<SketchVar>)
