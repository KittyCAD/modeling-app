// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ArtifactId } from './ArtifactId'
import type { ItemVisibility } from './ItemVisibility'
import type { ModuleId } from './ModuleId'
import type { NodePath } from './NodePath'
import type { NumericType } from './NumericType'
import type { SourceRange } from './SourceRange'

export type Group =
  | {
      type: 'FunctionCall'
      /**
       * The name of the user-defined function being called.  Anonymous
       * functions have no name.
       */
      name: string | null
      /**
       * The location of the function being called so that there's enough
       * info to go to its definition.
       */
      functionSourceRange: SourceRange
      /**
       * The unlabeled argument to the function.
       */
      unlabeledArg: OpArg | null
      /**
       * The labeled keyword arguments to the function.
       */
      labeledArgs: { [key in string]?: OpArg }
    }
  | {
      type: 'ModuleInstance'
      /**
       * The name of the module being used.
       */
      name: string
      /**
       * The ID of the module which can be used to determine its path.
       */
      moduleId: ModuleId
    }

/**
 * An argument to a CAD modeling operation.
 */
export type OpArg = {
  /**
   * The runtime value of the argument.  Instead of using [`KclValue`], we
   * refer to scene objects using their [`ArtifactId`]s.
   */
  value: OpKclValue
  /**
   * The KCL code expression for the argument.  This is used in the UI so
   * that the user can edit the expression.
   */
  sourceRange: SourceRange
}

export type OpHelix = { artifactId: ArtifactId }

/**
 * A KCL value used in Operations.  `ArtifactId`s are used to refer to the
 * actual scene objects.  Any data not needed in the UI may be omitted.
 */
export type OpKclValue =
  | { type: 'Uuid'; value: string }
  | { type: 'Bool'; value: boolean }
  | { type: 'Number'; value: number; ty: NumericType }
  | { type: 'String'; value: string }
  | { type: 'Array'; value: Array<OpKclValue> }
  | { type: 'Object'; value: { [key in string]?: OpKclValue } }
  | {
      type: 'TagIdentifier'
      /**
       * The name of the tag identifier.
       */
      value: string
      /**
       * The artifact ID of the object it refers to.
       */
      artifact_id: ArtifactId | null
    }
  | { type: 'TagDeclarator'; name: string }
  | { type: 'Plane'; artifact_id: ArtifactId }
  | { type: 'Face'; artifact_id: ArtifactId }
  | { type: 'Sketch'; value: OpSketch }
  | { type: 'Solid'; value: OpSolid }
  | { type: 'Helix'; value: OpHelix }
  | { type: 'ImportedGeometry'; artifact_id: ArtifactId }
  | { type: 'Function' }
  | { type: 'Module' }
  | { type: 'Type' }
  | { type: 'KclNone' }

export type OpSketch = { artifactId: ArtifactId }

export type OpSolid = { artifactId: ArtifactId }

/**
 * A CAD modeling operation for display in the feature tree, AKA operations
 * timeline.
 */
export type Operation =
  | {
      type: 'StdLibCall'
      name: string
      /**
       * The unlabeled argument to the function.
       */
      unlabeledArg: OpArg | null
      /**
       * The labeled keyword arguments to the function.
       */
      labeledArgs: { [key in string]?: OpArg }
      /**
       * The node path of the operation in the source code.
       */
      nodePath: NodePath
      /**
       * The source range of the operation in the source code.
       */
      sourceRange: SourceRange
      /**
       * True if the operation resulted in an error.
       */
      isError?: boolean
    }
  | {
      type: 'VariableDeclaration'
      /**
       * The variable name.
       */
      name: string
      /**
       * The value of the variable.
       */
      value: OpKclValue
      /**
       * The visibility modifier of the variable, e.g. `export`.  `Default`
       * means there is no visibility modifier.
       */
      visibility: ItemVisibility
      /**
       * The node path of the operation in the source code.
       */
      nodePath: NodePath
      /**
       * The source range of the operation in the source code.
       */
      sourceRange: SourceRange
    }
  | {
      type: 'GroupBegin'
      /**
       * The details of the group.
       */
      group: Group
      /**
       * The node path of the operation in the source code.
       */
      nodePath: NodePath
      /**
       * The source range of the operation in the source code.
       */
      sourceRange: SourceRange
    }
  | { type: 'GroupEnd' }
