// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ArrayExpression } from './ArrayExpression'
import type { ArrayRangeExpression } from './ArrayRangeExpression'
import type { AscribedExpression } from './AscribedExpression'
import type { BinaryExpression } from './BinaryExpression'
import type { CallExpressionKw } from './CallExpressionKw'
import type { FunctionExpression } from './FunctionExpression'
import type { IfExpression } from './IfExpression'
import type { KclNone } from './KclNone'
import type { LabelledExpression } from './LabelledExpression'
import type { Literal } from './Literal'
import type { MemberExpression } from './MemberExpression'
import type { Name } from './Name'
import type { Node } from './Node'
import type { ObjectExpression } from './ObjectExpression'
import type { PipeExpression } from './PipeExpression'
import type { PipeSubstitution } from './PipeSubstitution'
import type { SketchBlock } from './SketchBlock'
import type { SketchVar } from './SketchVar'
import type { TagDeclarator } from './TagDeclarator'
import type { UnaryExpression } from './UnaryExpression'

/**
 * An expression can be evaluated to yield a single KCL value.
 */
export type Expr =
  | ({ type: 'Literal' } & Node<Literal>)
  | ({ type: 'Name' } & Node<Name>)
  | ({ type: 'TagDeclarator' } & Node<TagDeclarator>)
  | ({ type: 'BinaryExpression' } & Node<BinaryExpression>)
  | ({ type: 'FunctionExpression' } & Node<FunctionExpression>)
  | ({ type: 'CallExpressionKw' } & Node<CallExpressionKw>)
  | ({ type: 'PipeExpression' } & Node<PipeExpression>)
  | ({ type: 'PipeSubstitution' } & Node<PipeSubstitution>)
  | ({ type: 'ArrayExpression' } & Node<ArrayExpression>)
  | ({ type: 'ArrayRangeExpression' } & Node<ArrayRangeExpression>)
  | ({ type: 'ObjectExpression' } & Node<ObjectExpression>)
  | ({ type: 'MemberExpression' } & Node<MemberExpression>)
  | ({ type: 'UnaryExpression' } & Node<UnaryExpression>)
  | ({ type: 'IfExpression' } & Node<IfExpression>)
  | ({ type: 'LabelledExpression' } & Node<LabelledExpression>)
  | ({ type: 'AscribedExpression' } & Node<AscribedExpression>)
  | ({ type: 'SketchBlock' } & Node<SketchBlock>)
  | ({ type: 'SketchVar' } & Node<SketchVar>)
  | ({ type: 'None' } & Node<KclNone>)
